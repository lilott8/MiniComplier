//
// Generated by JTB 1.3.2
//

package parser.bioscript.ast;
import parser.bioscript.visitor.*;
/**
 * Grammar production:
 * f0 -> <FUNCTION>
 * f1 -> Identifier()
 * f2 -> <LPAREN>
 * f3 -> FormalParameterList()
 * f4 -> <RPAREN>
 * f5 -> <LBRACE>
 * f6 -> Statement()
 * f7 -> <LBRACE>
 */
public class Function implements Node {
    public NodeToken f0;
    public Identifier f1;
    public NodeToken f2;
    public FormalParameterList f3;
    public NodeToken f4;
    public NodeToken f5;
    public Statement f6;
    public NodeToken f7;

    public Function(NodeToken n0, Identifier n1, NodeToken n2, FormalParameterList n3, NodeToken n4, NodeToken n5, Statement n6, NodeToken n7) {
        f0 = n0;
        f1 = n1;
        f2 = n2;
        f3 = n3;
        f4 = n4;
        f5 = n5;
        f6 = n6;
        f7 = n7;
    }

    public Function(Identifier n0, FormalParameterList n1, Statement n2) {
        f0 = new NodeToken("function");
        f1 = n0;
        f2 = new NodeToken("(");
        f3 = n1;
        f4 = new NodeToken(")");
        f5 = new NodeToken("{");
        f6 = n2;
        f7 = new NodeToken("{");
    }

    public void accept(Visitor v) {
        v.visit(this);
    }

    public <R, A> R accept(GJVisitor<R, A> v, A argu) {
        return v.visit(this, argu);
    }

    public <R> R accept(GJNoArguVisitor<R> v) {
        return v.visit(this);
    }

    public <A> void accept(GJVoidVisitor<A> v, A argu) {
        v.visit(this, argu);
    }
}

