//
// Generated by JTB 1.3.2
//

package parser.bioscript.visitor;

import java.util.Enumeration;

import parser.bioscript.ast.AndExpression;
import parser.bioscript.ast.AssignmentStatement;
import parser.bioscript.ast.BSProgram;
import parser.bioscript.ast.BranchStatement;
import parser.bioscript.ast.DetectStatement;
import parser.bioscript.ast.DrainStatement;
import parser.bioscript.ast.EqualityExpression;
import parser.bioscript.ast.Expression;
import parser.bioscript.ast.FalseLiteral;
import parser.bioscript.ast.FormalParameter;
import parser.bioscript.ast.FormalParameterList;
import parser.bioscript.ast.FormalParameterRest;
import parser.bioscript.ast.Function;
import parser.bioscript.ast.GreaterThanEqualExpression;
import parser.bioscript.ast.GreaterThanExpression;
import parser.bioscript.ast.HeatStatement;
import parser.bioscript.ast.Identifier;
import parser.bioscript.ast.Instruction;
import parser.bioscript.ast.IntegerLiteral;
import parser.bioscript.ast.LessThanEqualExpression;
import parser.bioscript.ast.LessThanExpression;
import parser.bioscript.ast.Manifest;
import parser.bioscript.ast.MatLiteral;
import parser.bioscript.ast.MinusExpression;
import parser.bioscript.ast.MixStatement;
import parser.bioscript.ast.NatLiteral;
import parser.bioscript.ast.Node;
import parser.bioscript.ast.NodeList;
import parser.bioscript.ast.NodeListOptional;
import parser.bioscript.ast.NodeOptional;
import parser.bioscript.ast.NodeSequence;
import parser.bioscript.ast.NodeToken;
import parser.bioscript.ast.NotEqualExpression;
import parser.bioscript.ast.NotExpression;
import parser.bioscript.ast.OrExpression;
import parser.bioscript.ast.ParenthesisExpression;
import parser.bioscript.ast.PlusExpression;
import parser.bioscript.ast.PrimaryExpression;
import parser.bioscript.ast.RealLiteral;
import parser.bioscript.ast.RepeatStatement;
import parser.bioscript.ast.SplitStatement;
import parser.bioscript.ast.Statement;
import parser.bioscript.ast.Stationary;
import parser.bioscript.ast.TimesExpression;
import parser.bioscript.ast.TrueLiteral;
import parser.bioscript.ast.Type;
import parser.bioscript.ast.WhileStatement;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJNoArguDepthFirst<R> implements GJNoArguVisitor<R> {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public R visit(NodeList n) {
        R _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeListOptional n) {
        if (n.present()) {
            R _ret = null;
            int _count = 0;
            for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
                e.nextElement().accept(this);
                _count++;
            }
            return _ret;
        } else
            return null;
    }

    public R visit(NodeOptional n) {
        if (n.present())
            return n.node.accept(this);
        else
            return null;
    }

    public R visit(NodeSequence n) {
        R _ret = null;
        int _count = 0;
        for (Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
        }
        return _ret;
    }

    public R visit(NodeToken n) {
        return null;
    }

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> Stationary()
     * f1 -> Manifest()
     * f2 -> <INSTRUCTIONS>
     * f3 -> Instruction()
     * f4 -> <EOF>
     */
    public R visit(BSProgram n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        return _ret;
    }

    /**
     * f0 -> <STATIONARY>
     * f1 -> Identifier()
     */
    public R visit(Stationary n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> <MANIFEST>
     * f1 -> Identifier()
     */
    public R visit(Manifest n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> Instruction()
     * | BranchStatement()
     * | WhileStatement()
     */
    public R visit(Statement n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> MixStatement()
     * | SplitStatement()
     * | DrainStatement()
     * | HeatStatement()
     * | DetectStatement()
     * | RepeatStatement()
     * | AssignmentStatement()
     */
    public R visit(Instruction n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <FUNCTION>
     * f1 -> Identifier()
     * f2 -> <LPAREN>
     * f3 -> FormalParameterList()
     * f4 -> <RPAREN>
     * f5 -> <LBRACE>
     * f6 -> Statement()
     * f7 -> <LBRACE>
     */
    public R visit(Function n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        return _ret;
    }

    /**
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     */
    public R visit(FormalParameterList n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> ( Type() )*
     * f1 -> Identifier()
     */
    public R visit(FormalParameter n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> <COMMA>
     * f1 -> FormalParameter()
     */
    public R visit(FormalParameterRest n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> <MIX> PrimaryExpression() <WITH> PrimaryExpression()
     * | <FOR> IntegerLiteral()
     */
    public R visit(MixStatement n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <SPLIT>
     * f1 -> PrimaryExpression()
     * f2 -> <INTO>
     * f3 -> PrimaryExpression()
     */
    public R visit(SplitStatement n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        return _ret;
    }

    /**
     * f0 -> <DRAIN>
     * f1 -> PrimaryExpression()
     */
    public R visit(DrainStatement n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> <HEAT> PrimaryExpression() <AT> IntegerLiteral()
     * | <FOR> IntegerLiteral()
     */
    public R visit(HeatStatement n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <DETECT> Identifier() <ON> PrimaryExpression()
     * | <FOR> <INTEGER_LITERAL>
     */
    public R visit(DetectStatement n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> WhileStatement()
     */
    public R visit(RepeatStatement n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> ( Type() )*
     * f1 -> Identifier()
     * f2 -> <ASSIGN>
     * f3 -> Expression()
     */
    public R visit(AssignmentStatement n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        return _ret;
    }

    /**
     * f0 -> MatLiteral()
     * | NatLiteral()
     * | RealLiteral()
     */
    public R visit(Type n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <IF> <LPAREN> Expression() <RPAREN> <LBRACE> Statement() <RBRACE>
     * | <ELSE_IF> <LPAREN> Expression() <RPAREN> <LBRACE> Statement() <RBRACE>
     * | <ELSE> <LBRACE> Statement() <RBRACE>
     */
    public R visit(BranchStatement n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <REPEAT>
     * f1 -> IntegerLiteral()
     * f2 -> <TIMES>
     * f3 -> <LBRACE>
     * f4 -> Statement()
     * f5 -> <RBRACE>
     */
    public R visit(WhileStatement n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        return _ret;
    }

    /**
     * f0 -> IntegerLiteral()
     * | TrueLiteral()
     * | FalseLiteral()
     * | Identifier()
     * | ParenthesisExpression()
     */
    public R visit(PrimaryExpression n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public R visit(IntegerLiteral n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <NAT>
     */
    public R visit(NatLiteral n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <MAT>
     */
    public R visit(MatLiteral n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <REAL>
     */
    public R visit(RealLiteral n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <TRUE>
     */
    public R visit(TrueLiteral n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <FALSE>
     */
    public R visit(FalseLiteral n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> <IDENTIFIER>
     */
    public R visit(Identifier n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> AndExpression()
     * | LessThanExpression()
     * | LessThanEqualExpression()
     * | GreaterThanExpression()
     * | GreaterThanEqualExpression()
     * | NotEqualExpression()
     * | EqualityExpression()
     * | OrExpression()
     * | PlusExpression()
     * | MinusExpression()
     * | TimesExpression()
     * | PrimaryExpression()
     */
    public R visit(Expression n) {
        R _ret = null;
        n.f0.accept(this);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <AND>
     * f2 -> PrimaryExpression()
     */
    public R visit(AndExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <LESSTHAN>
     * f2 -> PrimaryExpression()
     */
    public R visit(LessThanExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <LESSTHANEQUAL>
     * f2 -> PrimaryExpression()
     */
    public R visit(LessThanEqualExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <GREATERTHAN>
     * f2 -> PrimaryExpression()
     */
    public R visit(GreaterThanExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <GREATERTHANEQUAL>
     * f2 -> PrimaryExpression()
     */
    public R visit(GreaterThanEqualExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <NOTEQUAL>
     * f2 -> PrimaryExpression()
     */
    public R visit(NotEqualExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <OR>
     * f2 -> PrimaryExpression()
     */
    public R visit(EqualityExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <LESSTHAN>
     * f2 -> PrimaryExpression()
     */
    public R visit(OrExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <ADD>
     * f2 -> PrimaryExpression()
     */
    public R visit(PlusExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <MINUS>
     * f2 -> PrimaryExpression()
     */
    public R visit(MinusExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> PrimaryExpression()
     * f1 -> <MULTIPLY>
     * f2 -> PrimaryExpression()
     */
    public R visit(TimesExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

    /**
     * f0 -> <BANG>
     * f1 -> Expression()
     */
    public R visit(NotExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        return _ret;
    }

    /**
     * f0 -> <LPAREN>
     * f1 -> Expression()
     * f2 -> <RPAREN>
     */
    public R visit(ParenthesisExpression n) {
        R _ret = null;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        return _ret;
    }

}
