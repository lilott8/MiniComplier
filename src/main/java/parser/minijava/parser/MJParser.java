/* MJParser.java */
/* Generated By:JavaCC: Do not edit this line. MJParser.java */
package parser.minijava.parser;

import parser.minijava.ast.AllocationExpression;
import parser.minijava.ast.AndExpression;
import parser.minijava.ast.ArrayAllocationExpression;
import parser.minijava.ast.ArrayAssignmentStatement;
import parser.minijava.ast.ArrayLength;
import parser.minijava.ast.ArrayLookup;
import parser.minijava.ast.ArrayType;
import parser.minijava.ast.AssignmentStatement;
import parser.minijava.ast.Block;
import parser.minijava.ast.BooleanType;
import parser.minijava.ast.BranchStatement;
import parser.minijava.ast.ClassDeclaration;
import parser.minijava.ast.ClassExtendsDeclaration;
import parser.minijava.ast.Comment;
import parser.minijava.ast.CompareExpression;
import parser.minijava.ast.Expression;
import parser.minijava.ast.ExpressionList;
import parser.minijava.ast.ExpressionRest;
import parser.minijava.ast.FalseLiteral;
import parser.minijava.ast.FormalParameter;
import parser.minijava.ast.FormalParameterList;
import parser.minijava.ast.FormalParameterRest;
import parser.minijava.ast.Identifier;
import parser.minijava.ast.IntegerLiteral;
import parser.minijava.ast.IntegerType;
import parser.minijava.ast.MJProgram;
import parser.minijava.ast.MainClass;
import parser.minijava.ast.MessageSend;
import parser.minijava.ast.MethodDeclarationUnordered;
import parser.minijava.ast.MinusExpression;
import parser.minijava.ast.NodeChoice;
import parser.minijava.ast.NodeListOptional;
import parser.minijava.ast.NodeOptional;
import parser.minijava.ast.NodeSequence;
import parser.minijava.ast.NodeToken;
import parser.minijava.ast.NotExpression;
import parser.minijava.ast.ParenthesisExpression;
import parser.minijava.ast.PlusExpression;
import parser.minijava.ast.PrimaryExpression;
import parser.minijava.ast.PrintStatement;
import parser.minijava.ast.Statement;
import parser.minijava.ast.ThisExpression;
import parser.minijava.ast.TimesExpression;
import parser.minijava.ast.TrueLiteral;
import parser.minijava.ast.Type;
import parser.minijava.ast.TypeDeclarationUnordered;
import parser.minijava.ast.VarDeclarationUnordered;
import parser.minijava.ast.WhileStatement;


public class MJParser implements MJParserConstants {

    final public MJProgram MJProgram() throws ParseException {
        MainClass n0;
        NodeListOptional n1 = new NodeListOptional();
        TypeDeclarationUnordered n2;
        NodeToken n3;
        Token n4;
        n0 = MainClass();
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case CLASS: {
                    ;
                    break;
                }
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
            }
            n2 = TypeDeclarationUnordered();
            n1.addNode(n2);
        }
        n1.nodes.trimToSize();
        n4 = jj_consume_token(0);
        n4.beginColumn++;
        n4.endColumn++;
        n3 = JTBToolkit.makeNodeToken(n4);
        {
            if ("" != null) return new MJProgram(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public MainClass MainClass() throws ParseException {
        NodeToken n0;
        Token n1;
        Identifier n2;
        NodeToken n3;
        Token n4;
        NodeToken n5;
        Token n6;
        NodeToken n7;
        Token n8;
        NodeToken n9;
        Token n10;
        NodeToken n11;
        Token n12;
        NodeToken n13;
        Token n14;
        NodeToken n15;
        Token n16;
        NodeToken n17;
        Token n18;
        NodeToken n19;
        Token n20;
        Identifier n21;
        NodeToken n22;
        Token n23;
        NodeToken n24;
        Token n25;
        NodeListOptional n26 = new NodeListOptional();
        VarDeclarationUnordered n27;
        NodeListOptional n28 = new NodeListOptional();
        Statement n29;
        NodeToken n30;
        Token n31;
        NodeToken n32;
        Token n33;
        n1 = jj_consume_token(CLASS);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Identifier();
        n4 = jj_consume_token(LBRACE);
        n3 = JTBToolkit.makeNodeToken(n4);
        n6 = jj_consume_token(PUBLIC);
        n5 = JTBToolkit.makeNodeToken(n6);
        n8 = jj_consume_token(STATIC);
        n7 = JTBToolkit.makeNodeToken(n8);
        n10 = jj_consume_token(VOID);
        n9 = JTBToolkit.makeNodeToken(n10);
        n12 = jj_consume_token(MAIN);
        n11 = JTBToolkit.makeNodeToken(n12);
        n14 = jj_consume_token(LPAREN);
        n13 = JTBToolkit.makeNodeToken(n14);
        n16 = jj_consume_token(STRING);
        n15 = JTBToolkit.makeNodeToken(n16);
        n18 = jj_consume_token(LSQPAREN);
        n17 = JTBToolkit.makeNodeToken(n18);
        n20 = jj_consume_token(RSQPAREN);
        n19 = JTBToolkit.makeNodeToken(n20);
        n21 = Identifier();
        n23 = jj_consume_token(RPAREN);
        n22 = JTBToolkit.makeNodeToken(n23);
        n25 = jj_consume_token(LBRACE);
        n24 = JTBToolkit.makeNodeToken(n25);
        label_2:
        while (true) {
            if (jj_2_1(2)) {
                ;
            } else {
                break label_2;
            }
            n27 = VarDeclarationUnordered();
            n26.addNode(n27);
        }
        n26.nodes.trimToSize();
        label_3:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBRACE:
                case ELSE:
                case ELSE_IF:
                case IF:
                case WHILE:
                case PRINT:
                case IDENTIFIER: {
                    ;
                    break;
                }
                default:
                    jj_la1[1] = jj_gen;
                    break label_3;
            }
            n29 = Statement();
            n28.addNode(n29);
        }
        n28.nodes.trimToSize();
        n31 = jj_consume_token(RBRACE);
        n30 = JTBToolkit.makeNodeToken(n31);
        n33 = jj_consume_token(RBRACE);
        n32 = JTBToolkit.makeNodeToken(n33);
        {
            if ("" != null)
                return new MainClass(n0, n2, n3, n5, n7, n9, n11, n13, n15, n17, n19, n21, n22, n24, n26, n28, n30, n32);
        }
        throw new Error("Missing return statement in function");
    }

    final public TypeDeclarationUnordered TypeDeclarationUnordered() throws ParseException {
        NodeChoice n0;
        ClassDeclaration n1;
        ClassExtendsDeclaration n2;
        if (jj_2_2(3)) {
            n1 = ClassDeclaration();
            n0 = new NodeChoice(n1, 0);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case CLASS: {
                    n2 = ClassExtendsDeclaration();
                    n0 = new NodeChoice(n2, 1);
                    break;
                }
                default:
                    jj_la1[2] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return new TypeDeclarationUnordered(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public ClassDeclaration ClassDeclaration() throws ParseException {
        NodeToken n0;
        Token n1;
        Identifier n2;
        NodeToken n3;
        Token n4;
        NodeListOptional n5 = new NodeListOptional();
        Comment n6;
        NodeListOptional n7 = new NodeListOptional();
        VarDeclarationUnordered n8;
        NodeListOptional n9 = new NodeListOptional();
        MethodDeclarationUnordered n10;
        NodeToken n11;
        Token n12;
        n1 = jj_consume_token(CLASS);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Identifier();
        n4 = jj_consume_token(LBRACE);
        n3 = JTBToolkit.makeNodeToken(n4);
        label_4:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SINGLE_LINE_COMMENT:
                case FORMAL_COMMENT:
                case MULTI_LINE_COMMENT: {
                    ;
                    break;
                }
                default:
                    jj_la1[3] = jj_gen;
                    break label_4;
            }
            n6 = Comment();
            n5.addNode(n6);
        }
        n5.nodes.trimToSize();
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BOOLEAN:
                case INTEGER:
                case IDENTIFIER: {
                    ;
                    break;
                }
                default:
                    jj_la1[4] = jj_gen;
                    break label_5;
            }
            n8 = VarDeclarationUnordered();
            n7.addNode(n8);
        }
        n7.nodes.trimToSize();
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case PUBLIC: {
                    ;
                    break;
                }
                default:
                    jj_la1[5] = jj_gen;
                    break label_6;
            }
            n10 = MethodDeclarationUnordered();
            n9.addNode(n10);
        }
        n9.nodes.trimToSize();
        n12 = jj_consume_token(RBRACE);
        n11 = JTBToolkit.makeNodeToken(n12);
        {
            if ("" != null) return new ClassDeclaration(n0, n2, n3, n5, n7, n9, n11);
        }
        throw new Error("Missing return statement in function");
    }

    final public ClassExtendsDeclaration ClassExtendsDeclaration() throws ParseException {
        NodeToken n0;
        Token n1;
        Identifier n2;
        NodeToken n3;
        Token n4;
        Identifier n5;
        NodeToken n6;
        Token n7;
        NodeListOptional n8 = new NodeListOptional();
        Comment n9;
        NodeListOptional n10 = new NodeListOptional();
        VarDeclarationUnordered n11;
        NodeListOptional n12 = new NodeListOptional();
        MethodDeclarationUnordered n13;
        NodeToken n14;
        Token n15;
        n1 = jj_consume_token(CLASS);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Identifier();
        n4 = jj_consume_token(EXTENDS);
        n3 = JTBToolkit.makeNodeToken(n4);
        n5 = Identifier();
        n7 = jj_consume_token(LBRACE);
        n6 = JTBToolkit.makeNodeToken(n7);
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SINGLE_LINE_COMMENT:
                case FORMAL_COMMENT:
                case MULTI_LINE_COMMENT: {
                    ;
                    break;
                }
                default:
                    jj_la1[6] = jj_gen;
                    break label_7;
            }
            n9 = Comment();
            n8.addNode(n9);
        }
        n8.nodes.trimToSize();
        label_8:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BOOLEAN:
                case INTEGER:
                case IDENTIFIER: {
                    ;
                    break;
                }
                default:
                    jj_la1[7] = jj_gen;
                    break label_8;
            }
            n11 = VarDeclarationUnordered();
            n10.addNode(n11);
        }
        n10.nodes.trimToSize();
        label_9:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case PUBLIC: {
                    ;
                    break;
                }
                default:
                    jj_la1[8] = jj_gen;
                    break label_9;
            }
            n13 = MethodDeclarationUnordered();
            n12.addNode(n13);
        }
        n12.nodes.trimToSize();
        n15 = jj_consume_token(RBRACE);
        n14 = JTBToolkit.makeNodeToken(n15);
        {
            if ("" != null)
                return new ClassExtendsDeclaration(n0, n2, n3, n5, n6, n8, n10, n12, n14);
        }
        throw new Error("Missing return statement in function");
    }

    final public VarDeclarationUnordered VarDeclarationUnordered() throws ParseException {
        Type n0;
        Identifier n1;
        NodeToken n2;
        Token n3;
        n0 = Type();
        n1 = Identifier();
        n3 = jj_consume_token(SEMICOLON);
        n2 = JTBToolkit.makeNodeToken(n3);
        {
            if ("" != null) return new VarDeclarationUnordered(n0, n1, n2);
        }
        throw new Error("Missing return statement in function");
    }

    final public MethodDeclarationUnordered MethodDeclarationUnordered() throws ParseException {
        NodeToken n0;
        Token n1;
        Type n2;
        Identifier n3;
        NodeToken n4;
        Token n5;
        NodeOptional n6 = new NodeOptional();
        FormalParameterList n7;
        NodeToken n8;
        Token n9;
        NodeToken n10;
        Token n11;
        NodeListOptional n12 = new NodeListOptional();
        Comment n13;
        NodeListOptional n14 = new NodeListOptional();
        VarDeclarationUnordered n15;
        NodeListOptional n16 = new NodeListOptional();
        Statement n17;
        NodeToken n18;
        Token n19;
        Expression n20;
        NodeToken n21;
        Token n22;
        NodeToken n23;
        Token n24;
        n1 = jj_consume_token(PUBLIC);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Type();
        n3 = Identifier();
        n5 = jj_consume_token(LPAREN);
        n4 = JTBToolkit.makeNodeToken(n5);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case BOOLEAN:
            case INTEGER:
            case IDENTIFIER: {
                n7 = FormalParameterList();
                n6.addNode(n7);
                break;
            }
            default:
                jj_la1[9] = jj_gen;
                ;
        }
        n9 = jj_consume_token(RPAREN);
        n8 = JTBToolkit.makeNodeToken(n9);
        n11 = jj_consume_token(LBRACE);
        n10 = JTBToolkit.makeNodeToken(n11);
        label_10:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SINGLE_LINE_COMMENT:
                case FORMAL_COMMENT:
                case MULTI_LINE_COMMENT: {
                    ;
                    break;
                }
                default:
                    jj_la1[10] = jj_gen;
                    break label_10;
            }
            n13 = Comment();
            n12.addNode(n13);
        }
        n12.nodes.trimToSize();
        label_11:
        while (true) {
            if (jj_2_3(2)) {
                ;
            } else {
                break label_11;
            }
            n15 = VarDeclarationUnordered();
            n14.addNode(n15);
        }
        n14.nodes.trimToSize();
        label_12:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBRACE:
                case ELSE:
                case ELSE_IF:
                case IF:
                case WHILE:
                case PRINT:
                case IDENTIFIER: {
                    ;
                    break;
                }
                default:
                    jj_la1[11] = jj_gen;
                    break label_12;
            }
            n17 = Statement();
            n16.addNode(n17);
        }
        n16.nodes.trimToSize();
        n19 = jj_consume_token(RETURN);
        n18 = JTBToolkit.makeNodeToken(n19);
        n20 = Expression();
        n22 = jj_consume_token(SEMICOLON);
        n21 = JTBToolkit.makeNodeToken(n22);
        n24 = jj_consume_token(RBRACE);
        n23 = JTBToolkit.makeNodeToken(n24);
        {
            if ("" != null)
                return new MethodDeclarationUnordered(n0, n2, n3, n4, n6, n8, n10, n12, n14, n16, n18, n20, n21, n23);
        }
        throw new Error("Missing return statement in function");
    }

    final public FormalParameterList FormalParameterList() throws ParseException {
        FormalParameter n0;
        NodeListOptional n1 = new NodeListOptional();
        FormalParameterRest n2;
        n0 = FormalParameter();
        label_13:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA: {
                    ;
                    break;
                }
                default:
                    jj_la1[12] = jj_gen;
                    break label_13;
            }
            n2 = FormalParameterRest();
            n1.addNode(n2);
        }
        n1.nodes.trimToSize();
        {
            if ("" != null) return new FormalParameterList(n0, n1);
        }
        throw new Error("Missing return statement in function");
    }

    final public FormalParameter FormalParameter() throws ParseException {
        Type n0;
        Identifier n1;
        n0 = Type();
        n1 = Identifier();
        {
            if ("" != null) return new FormalParameter(n0, n1);
        }
        throw new Error("Missing return statement in function");
    }

    final public FormalParameterRest FormalParameterRest() throws ParseException {
        NodeToken n0;
        Token n1;
        FormalParameter n2;
        n1 = jj_consume_token(COMMA);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = FormalParameter();
        {
            if ("" != null) return new FormalParameterRest(n0, n2);
        }
        throw new Error("Missing return statement in function");
    }

    final public Type Type() throws ParseException {
        NodeChoice n0;
        ArrayType n1;
        BooleanType n2;
        IntegerType n3;
        Identifier n4;
        if (jj_2_4(3)) {
            n1 = ArrayType();
            n0 = new NodeChoice(n1, 0);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BOOLEAN: {
                    n2 = BooleanType();
                    n0 = new NodeChoice(n2, 1);
                    break;
                }
                case INTEGER: {
                    n3 = IntegerType();
                    n0 = new NodeChoice(n3, 2);
                    break;
                }
                case IDENTIFIER: {
                    n4 = Identifier();
                    n0 = new NodeChoice(n4, 3);
                    break;
                }
                default:
                    jj_la1[13] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return new Type(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public ArrayType ArrayType() throws ParseException {
        NodeToken n0;
        Token n1;
        NodeToken n2;
        Token n3;
        NodeToken n4;
        Token n5;
        n1 = jj_consume_token(INTEGER);
        n0 = JTBToolkit.makeNodeToken(n1);
        n3 = jj_consume_token(LSQPAREN);
        n2 = JTBToolkit.makeNodeToken(n3);
        n5 = jj_consume_token(RSQPAREN);
        n4 = JTBToolkit.makeNodeToken(n5);
        {
            if ("" != null) return new ArrayType(n0, n2, n4);
        }
        throw new Error("Missing return statement in function");
    }

    final public BooleanType BooleanType() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(BOOLEAN);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new BooleanType(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public IntegerType IntegerType() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(INTEGER);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new IntegerType(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public Statement Statement() throws ParseException {
        NodeChoice n0;
        Block n1;
        AssignmentStatement n2;
        ArrayAssignmentStatement n3;
        BranchStatement n4;
        WhileStatement n5;
        PrintStatement n6;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case LBRACE: {
                n1 = Block();
                n0 = new NodeChoice(n1, 0);
                break;
            }
            default:
                jj_la1[14] = jj_gen;
                if (jj_2_5(2)) {
                    n2 = AssignmentStatement();
                    n0 = new NodeChoice(n2, 1);
                } else if (jj_2_6(2)) {
                    n3 = ArrayAssignmentStatement();
                    n0 = new NodeChoice(n3, 2);
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case ELSE:
                        case ELSE_IF:
                        case IF: {
                            n4 = BranchStatement();
                            n0 = new NodeChoice(n4, 3);
                            break;
                        }
                        case WHILE: {
                            n5 = WhileStatement();
                            n0 = new NodeChoice(n5, 4);
                            break;
                        }
                        case PRINT: {
                            n6 = PrintStatement();
                            n0 = new NodeChoice(n6, 5);
                            break;
                        }
                        default:
                            jj_la1[15] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
        {
            if ("" != null) return new Statement(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public Block Block() throws ParseException {
        NodeToken n0;
        Token n1;
        NodeListOptional n2 = new NodeListOptional();
        Statement n3;
        NodeToken n4;
        Token n5;
        n1 = jj_consume_token(LBRACE);
        n0 = JTBToolkit.makeNodeToken(n1);
        label_14:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBRACE:
                case ELSE:
                case ELSE_IF:
                case IF:
                case WHILE:
                case PRINT:
                case IDENTIFIER: {
                    ;
                    break;
                }
                default:
                    jj_la1[16] = jj_gen;
                    break label_14;
            }
            n3 = Statement();
            n2.addNode(n3);
        }
        n2.nodes.trimToSize();
        n5 = jj_consume_token(RBRACE);
        n4 = JTBToolkit.makeNodeToken(n5);
        {
            if ("" != null) return new Block(n0, n2, n4);
        }
        throw new Error("Missing return statement in function");
    }

    final public AssignmentStatement AssignmentStatement() throws ParseException {
        Identifier n0;
        NodeToken n1;
        Token n2;
        Expression n3;
        NodeToken n4;
        Token n5;
        n0 = Identifier();
        n2 = jj_consume_token(ASSIGN);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = Expression();
        n5 = jj_consume_token(SEMICOLON);
        n4 = JTBToolkit.makeNodeToken(n5);
        {
            if ("" != null) return new AssignmentStatement(n0, n1, n3, n4);
        }
        throw new Error("Missing return statement in function");
    }

    final public ArrayAssignmentStatement ArrayAssignmentStatement() throws ParseException {
        Identifier n0;
        NodeToken n1;
        Token n2;
        Expression n3;
        NodeToken n4;
        Token n5;
        NodeToken n6;
        Token n7;
        Expression n8;
        NodeToken n9;
        Token n10;
        n0 = Identifier();
        n2 = jj_consume_token(LSQPAREN);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = Expression();
        n5 = jj_consume_token(RSQPAREN);
        n4 = JTBToolkit.makeNodeToken(n5);
        n7 = jj_consume_token(ASSIGN);
        n6 = JTBToolkit.makeNodeToken(n7);
        n8 = Expression();
        n10 = jj_consume_token(SEMICOLON);
        n9 = JTBToolkit.makeNodeToken(n10);
        {
            if ("" != null) return new ArrayAssignmentStatement(n0, n1, n3, n4, n6, n8, n9);
        }
        throw new Error("Missing return statement in function");
    }

    final public BranchStatement BranchStatement() throws ParseException {
        NodeChoice n0;
        NodeSequence n1;
        NodeToken n2;
        Token n3;
        NodeToken n4;
        Token n5;
        Expression n6;
        NodeToken n7;
        Token n8;
        NodeToken n9;
        Token n10;
        Statement n11;
        NodeToken n12;
        Token n13;
        NodeSequence n14;
        NodeToken n15;
        Token n16;
        NodeToken n17;
        Token n18;
        Expression n19;
        NodeToken n20;
        Token n21;
        NodeToken n22;
        Token n23;
        Statement n24;
        NodeToken n25;
        Token n26;
        NodeSequence n27;
        NodeToken n28;
        Token n29;
        NodeToken n30;
        Token n31;
        Statement n32;
        NodeToken n33;
        Token n34;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case IF: {
                n1 = new NodeSequence(7);
                n3 = jj_consume_token(IF);
                n2 = JTBToolkit.makeNodeToken(n3);
                n1.addNode(n2);
                n5 = jj_consume_token(LPAREN);
                n4 = JTBToolkit.makeNodeToken(n5);
                n1.addNode(n4);
                n6 = Expression();
                n1.addNode(n6);
                n8 = jj_consume_token(RPAREN);
                n7 = JTBToolkit.makeNodeToken(n8);
                n1.addNode(n7);
                n10 = jj_consume_token(LBRACE);
                n9 = JTBToolkit.makeNodeToken(n10);
                n1.addNode(n9);
                n11 = Statement();
                n1.addNode(n11);
                n13 = jj_consume_token(RBRACE);
                n12 = JTBToolkit.makeNodeToken(n13);
                n1.addNode(n12);
                n0 = new NodeChoice(n1, 0);
                break;
            }
            case ELSE_IF: {
                n14 = new NodeSequence(7);
                n16 = jj_consume_token(ELSE_IF);
                n15 = JTBToolkit.makeNodeToken(n16);
                n14.addNode(n15);
                n18 = jj_consume_token(LPAREN);
                n17 = JTBToolkit.makeNodeToken(n18);
                n14.addNode(n17);
                n19 = Expression();
                n14.addNode(n19);
                n21 = jj_consume_token(RPAREN);
                n20 = JTBToolkit.makeNodeToken(n21);
                n14.addNode(n20);
                n23 = jj_consume_token(LBRACE);
                n22 = JTBToolkit.makeNodeToken(n23);
                n14.addNode(n22);
                n24 = Statement();
                n14.addNode(n24);
                n26 = jj_consume_token(RBRACE);
                n25 = JTBToolkit.makeNodeToken(n26);
                n14.addNode(n25);
                n0 = new NodeChoice(n14, 1);
                break;
            }
            case ELSE: {
                n27 = new NodeSequence(4);
                n29 = jj_consume_token(ELSE);
                n28 = JTBToolkit.makeNodeToken(n29);
                n27.addNode(n28);
                n31 = jj_consume_token(LBRACE);
                n30 = JTBToolkit.makeNodeToken(n31);
                n27.addNode(n30);
                n32 = Statement();
                n27.addNode(n32);
                n34 = jj_consume_token(RBRACE);
                n33 = JTBToolkit.makeNodeToken(n34);
                n27.addNode(n33);
                n0 = new NodeChoice(n27, 2);
                break;
            }
            default:
                jj_la1[17] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if ("" != null) return new BranchStatement(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public WhileStatement WhileStatement() throws ParseException {
        NodeToken n0;
        Token n1;
        NodeToken n2;
        Token n3;
        Expression n4;
        NodeToken n5;
        Token n6;
        Statement n7;
        n1 = jj_consume_token(WHILE);
        n0 = JTBToolkit.makeNodeToken(n1);
        n3 = jj_consume_token(LPAREN);
        n2 = JTBToolkit.makeNodeToken(n3);
        n4 = Expression();
        n6 = jj_consume_token(RPAREN);
        n5 = JTBToolkit.makeNodeToken(n6);
        n7 = Statement();
        {
            if ("" != null) return new WhileStatement(n0, n2, n4, n5, n7);
        }
        throw new Error("Missing return statement in function");
    }

    final public PrintStatement PrintStatement() throws ParseException {
        NodeToken n0;
        Token n1;
        NodeToken n2;
        Token n3;
        Expression n4;
        NodeToken n5;
        Token n6;
        NodeToken n7;
        Token n8;
        n1 = jj_consume_token(PRINT);
        n0 = JTBToolkit.makeNodeToken(n1);
        n3 = jj_consume_token(LPAREN);
        n2 = JTBToolkit.makeNodeToken(n3);
        n4 = Expression();
        n6 = jj_consume_token(RPAREN);
        n5 = JTBToolkit.makeNodeToken(n6);
        n8 = jj_consume_token(SEMICOLON);
        n7 = JTBToolkit.makeNodeToken(n8);
        {
            if ("" != null) return new PrintStatement(n0, n2, n4, n5, n7);
        }
        throw new Error("Missing return statement in function");
    }

    final public Expression Expression() throws ParseException {
        NodeChoice n0;
        AndExpression n1;
        CompareExpression n2;
        PlusExpression n3;
        MinusExpression n4;
        TimesExpression n5;
        ArrayLookup n6;
        ArrayLength n7;
        MessageSend n8;
        PrimaryExpression n9;
        if (jj_2_7(2147483647)) {
            n1 = AndExpression();
            n0 = new NodeChoice(n1, 0);
        } else if (jj_2_8(2147483647)) {
            n2 = CompareExpression();
            n0 = new NodeChoice(n2, 1);
        } else if (jj_2_9(2147483647)) {
            n3 = PlusExpression();
            n0 = new NodeChoice(n3, 2);
        } else if (jj_2_10(2147483647)) {
            n4 = MinusExpression();
            n0 = new NodeChoice(n4, 3);
        } else if (jj_2_11(2147483647)) {
            n5 = TimesExpression();
            n0 = new NodeChoice(n5, 4);
        } else if (jj_2_12(2147483647)) {
            n6 = ArrayLookup();
            n0 = new NodeChoice(n6, 5);
        } else if (jj_2_13(2147483647)) {
            n7 = ArrayLength();
            n0 = new NodeChoice(n7, 6);
        } else if (jj_2_14(2147483647)) {
            n8 = MessageSend();
            n0 = new NodeChoice(n8, 7);
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LPAREN:
                case NOT:
                case FALSE:
                case NEW:
                case THIS:
                case TRUE:
                case INTEGER_LITERAL:
                case IDENTIFIER: {
                    n9 = PrimaryExpression();
                    n0 = new NodeChoice(n9, 8);
                    break;
                }
                default:
                    jj_la1[18] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return new Expression(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public AndExpression AndExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(AND);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new AndExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public CompareExpression CompareExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(LT);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new CompareExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public PlusExpression PlusExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(PLUS);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new PlusExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public MinusExpression MinusExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(MINUS);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new MinusExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public TimesExpression TimesExpression() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(MULTIPLY);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        {
            if ("" != null) return new TimesExpression(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public ArrayLookup ArrayLookup() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        PrimaryExpression n3;
        NodeToken n4;
        Token n5;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(LSQPAREN);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = PrimaryExpression();
        n5 = jj_consume_token(RSQPAREN);
        n4 = JTBToolkit.makeNodeToken(n5);
        {
            if ("" != null) return new ArrayLookup(n0, n1, n3, n4);
        }
        throw new Error("Missing return statement in function");
    }

    final public ArrayLength ArrayLength() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        NodeToken n3;
        Token n4;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(DOT);
        n1 = JTBToolkit.makeNodeToken(n2);
        n4 = jj_consume_token(LENGTH);
        n3 = JTBToolkit.makeNodeToken(n4);
        {
            if ("" != null) return new ArrayLength(n0, n1, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public MessageSend MessageSend() throws ParseException {
        PrimaryExpression n0;
        NodeToken n1;
        Token n2;
        Identifier n3;
        NodeToken n4;
        Token n5;
        NodeOptional n6 = new NodeOptional();
        ExpressionList n7;
        NodeToken n8;
        Token n9;
        n0 = PrimaryExpression();
        n2 = jj_consume_token(DOT);
        n1 = JTBToolkit.makeNodeToken(n2);
        n3 = Identifier();
        n5 = jj_consume_token(LPAREN);
        n4 = JTBToolkit.makeNodeToken(n5);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case LPAREN:
            case NOT:
            case FALSE:
            case NEW:
            case THIS:
            case TRUE:
            case INTEGER_LITERAL:
            case IDENTIFIER: {
                n7 = ExpressionList();
                n6.addNode(n7);
                break;
            }
            default:
                jj_la1[19] = jj_gen;
                ;
        }
        n9 = jj_consume_token(RPAREN);
        n8 = JTBToolkit.makeNodeToken(n9);
        {
            if ("" != null) return new MessageSend(n0, n1, n3, n4, n6, n8);
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionList ExpressionList() throws ParseException {
        Expression n0;
        NodeListOptional n1 = new NodeListOptional();
        ExpressionRest n2;
        n0 = Expression();
        label_15:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case COMMA: {
                    ;
                    break;
                }
                default:
                    jj_la1[20] = jj_gen;
                    break label_15;
            }
            n2 = ExpressionRest();
            n1.addNode(n2);
        }
        n1.nodes.trimToSize();
        {
            if ("" != null) return new ExpressionList(n0, n1);
        }
        throw new Error("Missing return statement in function");
    }

    final public ExpressionRest ExpressionRest() throws ParseException {
        NodeToken n0;
        Token n1;
        Expression n2;
        n1 = jj_consume_token(COMMA);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Expression();
        {
            if ("" != null) return new ExpressionRest(n0, n2);
        }
        throw new Error("Missing return statement in function");
    }

    final public PrimaryExpression PrimaryExpression() throws ParseException {
        NodeChoice n0;
        IntegerLiteral n1;
        TrueLiteral n2;
        FalseLiteral n3;
        Identifier n4;
        ThisExpression n5;
        ArrayAllocationExpression n6;
        AllocationExpression n7;
        NotExpression n8;
        ParenthesisExpression n9;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case INTEGER_LITERAL: {
                n1 = IntegerLiteral();
                n0 = new NodeChoice(n1, 0);
                break;
            }
            case TRUE: {
                n2 = TrueLiteral();
                n0 = new NodeChoice(n2, 1);
                break;
            }
            case FALSE: {
                n3 = FalseLiteral();
                n0 = new NodeChoice(n3, 2);
                break;
            }
            case IDENTIFIER: {
                n4 = Identifier();
                n0 = new NodeChoice(n4, 3);
                break;
            }
            case THIS: {
                n5 = ThisExpression();
                n0 = new NodeChoice(n5, 4);
                break;
            }
            default:
                jj_la1[21] = jj_gen;
                if (jj_2_15(3)) {
                    n6 = ArrayAllocationExpression();
                    n0 = new NodeChoice(n6, 5);
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case NEW: {
                            n7 = AllocationExpression();
                            n0 = new NodeChoice(n7, 6);
                            break;
                        }
                        case NOT: {
                            n8 = NotExpression();
                            n0 = new NodeChoice(n8, 7);
                            break;
                        }
                        case LPAREN: {
                            n9 = ParenthesisExpression();
                            n0 = new NodeChoice(n9, 8);
                            break;
                        }
                        default:
                            jj_la1[22] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
        {
            if ("" != null) return new PrimaryExpression(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public IntegerLiteral IntegerLiteral() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(INTEGER_LITERAL);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new IntegerLiteral(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public TrueLiteral TrueLiteral() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(TRUE);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new TrueLiteral(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public FalseLiteral FalseLiteral() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(FALSE);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new FalseLiteral(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public Identifier Identifier() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(IDENTIFIER);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new Identifier(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public ThisExpression ThisExpression() throws ParseException {
        NodeToken n0;
        Token n1;
        n1 = jj_consume_token(THIS);
        n0 = JTBToolkit.makeNodeToken(n1);
        {
            if ("" != null) return new ThisExpression(n0);
        }
        throw new Error("Missing return statement in function");
    }

    final public ArrayAllocationExpression ArrayAllocationExpression() throws ParseException {
        NodeToken n0;
        Token n1;
        NodeToken n2;
        Token n3;
        NodeToken n4;
        Token n5;
        Expression n6;
        NodeToken n7;
        Token n8;
        n1 = jj_consume_token(NEW);
        n0 = JTBToolkit.makeNodeToken(n1);
        n3 = jj_consume_token(INTEGER);
        n2 = JTBToolkit.makeNodeToken(n3);
        n5 = jj_consume_token(LSQPAREN);
        n4 = JTBToolkit.makeNodeToken(n5);
        n6 = Expression();
        n8 = jj_consume_token(RSQPAREN);
        n7 = JTBToolkit.makeNodeToken(n8);
        {
            if ("" != null) return new ArrayAllocationExpression(n0, n2, n4, n6, n7);
        }
        throw new Error("Missing return statement in function");
    }

    final public AllocationExpression AllocationExpression() throws ParseException {
        NodeToken n0;
        Token n1;
        Identifier n2;
        NodeToken n3;
        Token n4;
        NodeToken n5;
        Token n6;
        n1 = jj_consume_token(NEW);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Identifier();
        n4 = jj_consume_token(LPAREN);
        n3 = JTBToolkit.makeNodeToken(n4);
        n6 = jj_consume_token(RPAREN);
        n5 = JTBToolkit.makeNodeToken(n6);
        {
            if ("" != null) return new AllocationExpression(n0, n2, n3, n5);
        }
        throw new Error("Missing return statement in function");
    }

    final public NotExpression NotExpression() throws ParseException {
        NodeToken n0;
        Token n1;
        Expression n2;
        n1 = jj_consume_token(NOT);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Expression();
        {
            if ("" != null) return new NotExpression(n0, n2);
        }
        throw new Error("Missing return statement in function");
    }

    final public ParenthesisExpression ParenthesisExpression() throws ParseException {
        NodeToken n0;
        Token n1;
        Expression n2;
        NodeToken n3;
        Token n4;
        n1 = jj_consume_token(LPAREN);
        n0 = JTBToolkit.makeNodeToken(n1);
        n2 = Expression();
        n4 = jj_consume_token(RPAREN);
        n3 = JTBToolkit.makeNodeToken(n4);
        {
            if ("" != null) return new ParenthesisExpression(n0, n2, n3);
        }
        throw new Error("Missing return statement in function");
    }

    final public Comment Comment() throws ParseException {
        NodeChoice n0;
        NodeToken n1;
        Token n2;
        NodeToken n3;
        Token n4;
        NodeToken n5;
        Token n6;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case SINGLE_LINE_COMMENT: {
                n2 = jj_consume_token(SINGLE_LINE_COMMENT);
                n1 = JTBToolkit.makeNodeToken(n2);
                n0 = new NodeChoice(n1, 0);
                break;
            }
            case FORMAL_COMMENT: {
                n4 = jj_consume_token(FORMAL_COMMENT);
                n3 = JTBToolkit.makeNodeToken(n4);
                n0 = new NodeChoice(n3, 1);
                break;
            }
            case MULTI_LINE_COMMENT: {
                n6 = jj_consume_token(MULTI_LINE_COMMENT);
                n5 = JTBToolkit.makeNodeToken(n6);
                n0 = new NodeChoice(n5, 2);
                break;
            }
            default:
                jj_la1[23] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        {
            if ("" != null) return new Comment(n0);
        }
        throw new Error("Missing return statement in function");
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_15();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_3R_35() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_29() {
        if (jj_3R_39()) return true;
        return false;
    }

    private boolean jj_3R_56() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(LT)) return true;
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3R_34() {
        if (jj_3R_44()) return true;
        return false;
    }

    private boolean jj_3R_28() {
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_27() {
        if (jj_3R_38()) return true;
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_3R_43()) return true;
        return false;
    }

    private boolean jj_3R_61() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(LENGTH)) return true;
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_3R_37()) return true;
        return false;
    }

    private boolean jj_3_4() {
        if (jj_3R_18()) return true;
        return false;
    }

    private boolean jj_3R_25() {
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3R_24() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_4()) {
            jj_scanpos = xsp;
            if (jj_3R_33()) {
                jj_scanpos = xsp;
                if (jj_3R_34()) {
                    jj_scanpos = xsp;
                    if (jj_3R_35()) return true;
                }
            }
        }
        return false;
    }

    private boolean jj_3R_21() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_25()) {
            jj_scanpos = xsp;
            if (jj_3R_26()) {
                jj_scanpos = xsp;
                if (jj_3R_27()) {
                    jj_scanpos = xsp;
                    if (jj_3R_28()) {
                        jj_scanpos = xsp;
                        if (jj_3R_29()) {
                            jj_scanpos = xsp;
                            if (jj_3_15()) {
                                jj_scanpos = xsp;
                                if (jj_3R_30()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_31()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_32()) return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_55() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(AND)) return true;
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3R_39() {
        if (jj_scan_token(THIS)) return true;
        return false;
    }

    private boolean jj_3_6() {
        if (jj_3R_20()) return true;
        return false;
    }

    private boolean jj_3R_60() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(LSQPAREN)) return true;
        if (jj_3R_21()) return true;
        if (jj_scan_token(RSQPAREN)) return true;
        return false;
    }

    private boolean jj_3_5() {
        if (jj_3R_19()) return true;
        return false;
    }

    private boolean jj_3_14() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_22()) return true;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private boolean jj_3_13() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(LENGTH)) return true;
        return false;
    }

    private boolean jj_3R_22() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_54() {
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3_12() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(RSQPAREN)) return true;
        return false;
    }

    private boolean jj_3R_17() {
        if (jj_scan_token(CLASS)) return true;
        if (jj_3R_22()) return true;
        if (jj_scan_token(LBRACE)) return true;
        return false;
    }

    private boolean jj_3R_53() {
        if (jj_3R_62()) return true;
        return false;
    }

    private boolean jj_3R_42() {
        if (jj_scan_token(LPAREN)) return true;
        if (jj_3R_45()) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_66() {
        if (jj_scan_token(COMMA)) return true;
        if (jj_3R_45()) return true;
        return false;
    }

    private boolean jj_3_11() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(MULTIPLY)) return true;
        return false;
    }

    private boolean jj_3R_52() {
        if (jj_3R_61()) return true;
        return false;
    }

    private boolean jj_3_10() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(MINUS)) return true;
        return false;
    }

    private boolean jj_3R_20() {
        if (jj_3R_22()) return true;
        if (jj_scan_token(LSQPAREN)) return true;
        return false;
    }

    private boolean jj_3R_51() {
        if (jj_3R_60()) return true;
        return false;
    }

    private boolean jj_3R_38() {
        if (jj_scan_token(FALSE)) return true;
        return false;
    }

    private boolean jj_3R_59() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(MULTIPLY)) return true;
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3_9() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(PLUS)) return true;
        return false;
    }

    private boolean jj_3R_50() {
        if (jj_3R_59()) return true;
        return false;
    }

    private boolean jj_3_8() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(LT)) return true;
        return false;
    }

    private boolean jj_3R_16() {
        if (jj_3R_24()) return true;
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_44() {
        if (jj_scan_token(INTEGER)) return true;
        return false;
    }

    private boolean jj_3R_65() {
        if (jj_3R_66()) return true;
        return false;
    }

    private boolean jj_3R_49() {
        if (jj_3R_58()) return true;
        return false;
    }

    private boolean jj_3R_41() {
        if (jj_scan_token(NOT)) return true;
        if (jj_3R_45()) return true;
        return false;
    }

    private boolean jj_3_7() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(AND)) return true;
        return false;
    }

    private boolean jj_3R_48() {
        if (jj_3R_57()) return true;
        return false;
    }

    private boolean jj_3R_64() {
        if (jj_3R_45()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_65()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_37() {
        if (jj_scan_token(TRUE)) return true;
        return false;
    }

    private boolean jj_3R_47() {
        if (jj_3R_56()) return true;
        return false;
    }

    private boolean jj_3R_58() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(MINUS)) return true;
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_17()) return true;
        return false;
    }

    private boolean jj_3R_46() {
        if (jj_3R_55()) return true;
        return false;
    }

    private boolean jj_3R_43() {
        if (jj_scan_token(BOOLEAN)) return true;
        return false;
    }

    private boolean jj_3R_45() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_46()) {
            jj_scanpos = xsp;
            if (jj_3R_47()) {
                jj_scanpos = xsp;
                if (jj_3R_48()) {
                    jj_scanpos = xsp;
                    if (jj_3R_49()) {
                        jj_scanpos = xsp;
                        if (jj_3R_50()) {
                            jj_scanpos = xsp;
                            if (jj_3R_51()) {
                                jj_scanpos = xsp;
                                if (jj_3R_52()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_53()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_54()) return true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    private boolean jj_3R_19() {
        if (jj_3R_22()) return true;
        if (jj_scan_token(ASSIGN)) return true;
        return false;
    }

    private boolean jj_3R_36() {
        if (jj_scan_token(INTEGER_LITERAL)) return true;
        return false;
    }

    private boolean jj_3R_63() {
        if (jj_3R_64()) return true;
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_scan_token(NEW)) return true;
        if (jj_3R_22()) return true;
        if (jj_scan_token(LPAREN)) return true;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_62() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_22()) return true;
        if (jj_scan_token(LPAREN)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_63()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) return true;
        return false;
    }

    private boolean jj_3R_57() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(PLUS)) return true;
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3R_18() {
        if (jj_scan_token(INTEGER)) return true;
        if (jj_scan_token(LSQPAREN)) return true;
        if (jj_scan_token(RSQPAREN)) return true;
        return false;
    }

    private boolean jj_3R_32() {
        if (jj_3R_42()) return true;
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_3R_41()) return true;
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_16()) return true;
        return false;
    }

    private boolean jj_3_3() {
        if (jj_3R_16()) return true;
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_3R_40()) return true;
        return false;
    }

    private boolean jj_3_15() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_scan_token(NEW)) return true;
        if (jj_scan_token(INTEGER)) return true;
        if (jj_scan_token(LSQPAREN)) return true;
        if (jj_3R_45()) return true;
        if (jj_scan_token(RSQPAREN)) return true;
        return false;
    }

    /**
     * Generated Token Manager.
     */
    public MJParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[24];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x40000000, 0x2000, 0x40000000, 0x1c0, 0x20000000, 0x0, 0x1c0, 0x20000000, 0x0, 0x20000000, 0x1c0, 0x2000, 0x0, 0x20000000, 0x2000, 0x0, 0x2000, 0x0, 0x10000200, 0x10000200, 0x0, 0x0, 0x10000200, 0x1c0,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x110033, 0x0, 0x0, 0x100040, 0x400, 0x0, 0x100040, 0x400, 0x100040, 0x0, 0x110033, 0x40000, 0x100040, 0x0, 0x10033, 0x110033, 0x13, 0x18c208, 0x18c208, 0x40000, 0x18c008, 0x200, 0x0,};
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[15];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /**
     * Constructor with InputStream.
     */
    public MJParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public MJParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new MJParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 24; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 24; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor.
     */
    public MJParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new MJParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 24; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 24; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor with generated Token Manager.
     */
    public MJParser(MJParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 24; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(MJParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 24; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }


    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[55];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 24; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 55; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 15; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
