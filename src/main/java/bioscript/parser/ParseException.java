package bioscript.parser;/* Generated By:JavaCC: Do not edit this line. bioscript.parser.ParseException.java Version 6.0 */
/* JavaCCOptions:KEEP_LINE_COL=null */

/**
 * This exception is thrown when parse errors are encountered. You can explicitly create objects of
 * this exception type by calling the method generateParseException in the generated parser.
 *
 * You can modify this class to customize your error reporting mechanisms so long as you retain the
 * public fields.
 */
public class ParseException extends Exception {

    /**
     * The version identifier for this Serializable class. Increment only if the <i>serialized</i>
     * form of the class changes.
     */
    private static final long serialVersionUID = 1L;

    /**
     * This constructor is used by the method "generateParseException" in the generated parser.
     * Calling this constructor generates a new object of this type with the fields "currentToken",
     * "expectedTokenSequences", and "tokenImage" set.
     */
    public ParseException(Token currentTokenVal,
                          int[][] expectedTokenSequencesVal,
                          String[] tokenImageVal
    ) {
        super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));
        currentToken = currentTokenVal;
        expectedTokenSequences = expectedTokenSequencesVal;
        tokenImage = tokenImageVal;
    }

    /**
     * The following constructors are for use by you for whatever purpose you can think of.
     * Constructing the exception in this manner makes the exception behave in the normal way -
     * i.e., as documented in the class "Throwable".  The fields "errorToken",
     * "expectedTokenSequences", and "tokenImage" do not contain relevant information.  The JavaCC
     * generated code does not use these constructors.
     */

    public ParseException() {
        super();
    }

    /**
     * Constructor with message.
     */
    public ParseException(String message) {
        super(message);
    }


    /**
     * This is the last token that has been consumed successfully.  If this object has been created
     * due to a parse error, the token followng this token will (therefore) be the first error
     * token.
     */
    public Token currentToken;

    /**
     * Each entry in this array is an array of integers.  Each array of integers represents a
     * sequence of tokens (by their ordinal values) that is expected at this point of the parse.
     */
    public int[][] expectedTokenSequences;

    /**
     * This is a reference to the "tokenImage" array of the generated parser within which the parse
     * error occurred.  This array is defined in the generated ...Constants interface.
     */
    public String[] tokenImage;

    /**
     * It uses "currentToken" and "expectedTokenSequences" to generate a parse error message and
     * returns it.  If this object has been created due to a parse error, and you do not catch it
     * (it gets thrown from the parser) the correct error message gets displayed.
     */
    private static String initialise(Token currentToken,
                                     int[][] expectedTokenSequences,
                                     String[] tokenImage) {
        String eol = System.getProperty("line.separator", "\n");
        StringBuffer expected = new StringBuffer();
        int maxSize = 0;
        for (int i = 0; i < expectedTokenSequences.length; i++) {
            if (maxSize < expectedTokenSequences[i].length) {
                maxSize = expectedTokenSequences[i].length;
            }
            for (int j = 0; j < expectedTokenSequences[i].length; j++) {
                expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
            }
            if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {
                expected.append("...");
            }
            expected.append(eol).append("    ");
        }
        String retval = "Encountered \"";
        Token tok = currentToken.next;
        for (int i = 0; i < maxSize; i++) {
            if (i != 0) retval += " ";
            if (tok.kind == 0) {
                retval += tokenImage[0];
                break;
            }
            retval += " " + tokenImage[tok.kind];
            retval += " \"";
            retval += add_escapes(tok.image);
            retval += " \"";
            tok = tok.next;
        }
        retval += "\" at line " + currentToken.next.beginLine + ", column " + currentToken.next.beginColumn;
        retval += "." + eol;
        if (expectedTokenSequences.length == 1) {
            retval += "Was expecting:" + eol + "    ";
        } else {
            retval += "Was expecting one of:" + eol + "    ";
        }
        retval += expected.toString();
        return retval;
    }

    /**
     * The end of line string for this machine.
     */
    protected String eol = System.getProperty("line.separator", "\n");

    /**
     * Used to convert raw characters to their escaped version when these raw version cannot be used
     * as part of an ASCII string literal.
     */
    static String add_escapes(String str) {
        StringBuffer retval = new StringBuffer();
        char ch;
        for (int i = 0; i < str.length(); i++) {
            switch (str.charAt(i)) {
                case 0:
                    continue;
                case '\b':
                    retval.append("\\b");
                    continue;
                case '\t':
                    retval.append("\\t");
                    continue;
                case '\n':
                    retval.append("\\n");
                    continue;
                case '\f':
                    retval.append("\\f");
                    continue;
                case '\r':
                    retval.append("\\r");
                    continue;
                case '\"':
                    retval.append("\\\"");
                    continue;
                case '\'':
                    retval.append("\\\'");
                    continue;
                case '\\':
                    retval.append("\\\\");
                    continue;
                default:
                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                        String s = "0000" + Integer.toString(ch, 16);
                        retval.append("\\u" + s.substring(s.length() - 4, s.length()));
                    } else {
                        retval.append(ch);
                    }
                    continue;
            }
        }
        return retval.toString();
    }

    /**
     * bioscript.parser.Token literal values and constants. Generated by
     * org.javacc.parser.OtherFilesGen#start()
     */
    public static interface BioScriptParserConstants {

        /**
         * End of File.
         */
        int EOF = 0;
        /**
         * RegularExpression Id.
         */
        int MIX = 6;
        /**
         * RegularExpression Id.
         */
        int SPLIT = 7;
        /**
         * RegularExpression Id.
         */
        int DRAIN = 8;
        /**
         * RegularExpression Id.
         */
        int HEAT = 9;
        /**
         * RegularExpression Id.
         */
        int FOR = 10;
        /**
         * RegularExpression Id.
         */
        int AT = 11;
        /**
         * RegularExpression Id.
         */
        int DETECT = 12;
        /**
         * RegularExpression Id.
         */
        int REPEAT = 13;
        /**
         * RegularExpression Id.
         */
        int IF = 14;
        /**
         * RegularExpression Id.
         */
        int ELSE = 15;
        /**
         * RegularExpression Id.
         */
        int IDENTIFIER = 16;
        /**
         * RegularExpression Id.
         */
        int INT_SCALAR = 17;
        /**
         * RegularExpression Id.
         */
        int LETTER = 18;
        /**
         * RegularExpression Id.
         */
        int DIGIT = 19;
        /**
         * RegularExpression Id.
         */
        int LPAREN = 20;
        /**
         * RegularExpression Id.
         */
        int RPAREN = 21;
        /**
         * RegularExpression Id.
         */
        int LBRACKET = 22;
        /**
         * RegularExpression Id.
         */
        int RBRACKET = 23;
        /**
         * RegularExpression Id.
         */
        int LBRACE = 24;
        /**
         * RegularExpression Id.
         */
        int RBRACE = 25;
        /**
         * RegularExpression Id.
         */
        int DOT = 26;
        /**
         * RegularExpression Id.
         */
        int ADD = 27;
        /**
         * RegularExpression Id.
         */
        int AND = 28;
        /**
         * RegularExpression Id.
         */
        int ASSIGN = 29;
        /**
         * RegularExpression Id.
         */
        int BANG = 30;
        /**
         * RegularExpression Id.
         */
        int LESSTHAN = 31;
        /**
         * RegularExpression Id.
         */
        int GREATERTHAN = 32;
        /**
         * RegularExpression Id.
         */
        int MINUS = 33;
        /**
         * RegularExpression Id.
         */
        int OR = 34;

        /**
         * Lexical state.
         */
        int DEFAULT = 0;

        /**
         * Literal token values.
         */
        String[] tokenImage = {
                "<EOF>",
                "\" \"",
                "\"\\t\"",
                "\"\\n\"",
                "\"\\r\"",
                "\"\\f\"",
                "\"mix\"",
                "\"split\"",
                "\"drain\"",
                "\"heat\"",
                "\"for\"",
                "\"at\"",
                "\"detect\"",
                "\"repeat\"",
                "\"if\"",
                "\"else\"",
                "<IDENTIFIER>",
                "<INT_SCALAR>",
                "<LETTER>",
                "<DIGIT>",
                "\"(\"",
                "\")\"",
                "\"[\"",
                "\"]\"",
                "\"{\"",
                "\"}\"",
                "\".\"",
                "\"+\"",
                "\"&&\"",
                "\"=\"",
                "\"!\"",
                "\"<\"",
                "\">\"",
                "\"-\"",
                "\"||\"",
        };

    }

    /**
     * bioscript.parser.Token Manager.
     */
    @SuppressWarnings("unused")
    public static class BioScriptParserTokenManager implements BioScriptParserConstants {

        /**
         * Debug output.
         */
        public java.io.PrintStream debugStream = System.out;

        /**
         * Set debug output.
         */
        public void setDebugStream(java.io.PrintStream ds) {
            debugStream = ds;
        }

        private final int jjStopStringLiteralDfa_0(int pos, long active0) {
            debugStream.println("   No more string literal token matches are possible.");
            switch (pos) {
                case 0:
                    if ((active0 & 0xffc0L) != 0L) {
                        jjmatchedKind = 16;
                        return 5;
                    }
                    return -1;
                case 1:
                    if ((active0 & 0xb7c0L) != 0L) {
                        jjmatchedKind = 16;
                        jjmatchedPos = 1;
                        return 5;
                    }
                    if ((active0 & 0x4800L) != 0L)
                        return 5;
                    return -1;
                case 2:
                    if ((active0 & 0xb380L) != 0L) {
                        jjmatchedKind = 16;
                        jjmatchedPos = 2;
                        return 5;
                    }
                    if ((active0 & 0x440L) != 0L)
                        return 5;
                    return -1;
                case 3:
                    if ((active0 & 0x3180L) != 0L) {
                        jjmatchedKind = 16;
                        jjmatchedPos = 3;
                        return 5;
                    }
                    if ((active0 & 0x8200L) != 0L)
                        return 5;
                    return -1;
                case 4:
                    if ((active0 & 0x3000L) != 0L) {
                        jjmatchedKind = 16;
                        jjmatchedPos = 4;
                        return 5;
                    }
                    if ((active0 & 0x180L) != 0L)
                        return 5;
                    return -1;
                default:
                    return -1;
            }
        }

        private final int jjStartNfa_0(int pos, long active0) {
            return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
        }

        private int jjStopAtPos(int pos, int kind) {
            jjmatchedKind = kind;
            jjmatchedPos = pos;
            debugStream.println("   No more string literal token matches are possible.");
            debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
            return pos + 1;
        }

        private int jjMoveStringLiteralDfa0_0() {
            switch (curChar) {
                case 33:
                    return jjStopAtPos(0, 30);
                case 38:
                    return jjMoveStringLiteralDfa1_0(0x10000000L);
                case 40:
                    return jjStopAtPos(0, 20);
                case 41:
                    return jjStopAtPos(0, 21);
                case 43:
                    return jjStopAtPos(0, 27);
                case 45:
                    return jjStopAtPos(0, 33);
                case 46:
                    return jjStopAtPos(0, 26);
                case 60:
                    return jjStopAtPos(0, 31);
                case 61:
                    return jjStopAtPos(0, 29);
                case 62:
                    return jjStopAtPos(0, 32);
                case 91:
                    return jjStopAtPos(0, 22);
                case 93:
                    return jjStopAtPos(0, 23);
                case 97:
                    return jjMoveStringLiteralDfa1_0(0x800L);
                case 100:
                    return jjMoveStringLiteralDfa1_0(0x1100L);
                case 101:
                    return jjMoveStringLiteralDfa1_0(0x8000L);
                case 102:
                    return jjMoveStringLiteralDfa1_0(0x400L);
                case 104:
                    return jjMoveStringLiteralDfa1_0(0x200L);
                case 105:
                    return jjMoveStringLiteralDfa1_0(0x4000L);
                case 109:
                    return jjMoveStringLiteralDfa1_0(0x40L);
                case 114:
                    return jjMoveStringLiteralDfa1_0(0x2000L);
                case 115:
                    return jjMoveStringLiteralDfa1_0(0x80L);
                case 123:
                    return jjStopAtPos(0, 24);
                case 124:
                    return jjMoveStringLiteralDfa1_0(0x400000000L);
                case 125:
                    return jjStopAtPos(0, 25);
                default:
                    debugStream.println("   No string literal matches possible.");
                    return jjMoveNfa_0(0, 0);
            }
        }

        private int jjMoveStringLiteralDfa1_0(long active0) {
            if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
                debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
            debugStream.println("   Possible string literal matches : { "
                    +
                    jjKindsForBitVector(0, active0) + " } ");
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                jjStopStringLiteralDfa_0(0, active0);
                if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
                    debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
                return 1;
            }
            debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int) curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
            switch (curChar) {
                case 38:
                    if ((active0 & 0x10000000L) != 0L)
                        return jjStopAtPos(1, 28);
                    break;
                case 101:
                    return jjMoveStringLiteralDfa2_0(active0, 0x3200L);
                case 102:
                    if ((active0 & 0x4000L) != 0L)
                        return jjStartNfaWithStates_0(1, 14, 5);
                    break;
                case 105:
                    return jjMoveStringLiteralDfa2_0(active0, 0x40L);
                case 108:
                    return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
                case 111:
                    return jjMoveStringLiteralDfa2_0(active0, 0x400L);
                case 112:
                    return jjMoveStringLiteralDfa2_0(active0, 0x80L);
                case 114:
                    return jjMoveStringLiteralDfa2_0(active0, 0x100L);
                case 116:
                    if ((active0 & 0x800L) != 0L)
                        return jjStartNfaWithStates_0(1, 11, 5);
                    break;
                case 124:
                    if ((active0 & 0x400000000L) != 0L)
                        return jjStopAtPos(1, 34);
                    break;
                default:
                    debugStream.println("   No string literal matches possible.");
                    break;
            }
            return jjStartNfa_0(0, active0);
        }

        private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(0, old0);
            if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
                debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
            debugStream.println("   Possible string literal matches : { "
                    +
                    jjKindsForBitVector(0, active0) + " } ");
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                jjStopStringLiteralDfa_0(1, active0);
                if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
                    debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
                return 2;
            }
            debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int) curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
            switch (curChar) {
                case 97:
                    return jjMoveStringLiteralDfa3_0(active0, 0x300L);
                case 108:
                    return jjMoveStringLiteralDfa3_0(active0, 0x80L);
                case 112:
                    return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
                case 114:
                    if ((active0 & 0x400L) != 0L)
                        return jjStartNfaWithStates_0(2, 10, 5);
                    break;
                case 115:
                    return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
                case 116:
                    return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
                case 120:
                    if ((active0 & 0x40L) != 0L)
                        return jjStartNfaWithStates_0(2, 6, 5);
                    break;
                default:
                    debugStream.println("   No string literal matches possible.");
                    break;
            }
            return jjStartNfa_0(1, active0);
        }

        private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(1, old0);
            if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
                debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
            debugStream.println("   Possible string literal matches : { "
                    +
                    jjKindsForBitVector(0, active0) + " } ");
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                jjStopStringLiteralDfa_0(2, active0);
                if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
                    debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
                return 3;
            }
            debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int) curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
            switch (curChar) {
                case 101:
                    if ((active0 & 0x8000L) != 0L)
                        return jjStartNfaWithStates_0(3, 15, 5);
                    return jjMoveStringLiteralDfa4_0(active0, 0x3000L);
                case 105:
                    return jjMoveStringLiteralDfa4_0(active0, 0x180L);
                case 116:
                    if ((active0 & 0x200L) != 0L)
                        return jjStartNfaWithStates_0(3, 9, 5);
                    break;
                default:
                    debugStream.println("   No string literal matches possible.");
                    break;
            }
            return jjStartNfa_0(2, active0);
        }

        private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(2, old0);
            if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
                debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
            debugStream.println("   Possible string literal matches : { "
                    +
                    jjKindsForBitVector(0, active0) + " } ");
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                jjStopStringLiteralDfa_0(3, active0);
                if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
                    debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
                return 4;
            }
            debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int) curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
            switch (curChar) {
                case 97:
                    return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
                case 99:
                    return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
                case 110:
                    if ((active0 & 0x100L) != 0L)
                        return jjStartNfaWithStates_0(4, 8, 5);
                    break;
                case 116:
                    if ((active0 & 0x80L) != 0L)
                        return jjStartNfaWithStates_0(4, 7, 5);
                    break;
                default:
                    debugStream.println("   No string literal matches possible.");
                    break;
            }
            return jjStartNfa_0(3, active0);
        }

        private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(3, old0);
            if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
                debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
            debugStream.println("   Possible string literal matches : { "
                    +
                    jjKindsForBitVector(0, active0) + " } ");
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                jjStopStringLiteralDfa_0(4, active0);
                if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
                    debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
                return 5;
            }
            debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int) curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
            switch (curChar) {
                case 116:
                    if ((active0 & 0x1000L) != 0L)
                        return jjStartNfaWithStates_0(5, 12, 5);
                    else if ((active0 & 0x2000L) != 0L)
                        return jjStartNfaWithStates_0(5, 13, 5);
                    break;
                default:
                    debugStream.println("   No string literal matches possible.");
                    break;
            }
            return jjStartNfa_0(4, active0);
        }

        private int jjStartNfaWithStates_0(int pos, int kind, int state) {
            jjmatchedKind = kind;
            jjmatchedPos = pos;
            debugStream.println("   No more string literal token matches are possible.");
            debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return pos + 1;
            }
            debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int) curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
            return jjMoveNfa_0(state, pos + 1);
        }

        private int jjMoveNfa_0(int startState, int curPos) {
            int startsAt = 0;
            jjnewStateCnt = 6;
            int i = 1;
            jjstateSet[0] = startState;
            debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
            debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int) curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
            int kind = 0x7fffffff;
            for (; ; ) {
                if (++jjround == 0x7fffffff)
                    ReInitRounds();
                if (curChar < 64) {
                    long l = 1L << curChar;
                    do {
                        switch (jjstateSet[--i]) {
                            case 0:
                                if ((0x3ff000000000000L & l) != 0L) {
                                    if (kind > 19)
                                        kind = 19;
                                }
                                if ((0x3fe000000000000L & l) != 0L) {
                                    if (kind > 17)
                                        kind = 17;
                                    {
                                        jjCheckNAdd(2);
                                    }
                                } else if (curChar == 48) {
                                    if (kind > 17)
                                        kind = 17;
                                }
                                break;
                            case 1:
                                if ((0x3fe000000000000L & l) == 0L)
                                    break;
                                if (kind > 17)
                                    kind = 17;
                            {
                                jjCheckNAdd(2);
                            }
                            break;
                            case 2:
                                if ((0x3ff000000000000L & l) == 0L)
                                    break;
                                if (kind > 17)
                                    kind = 17;
                            {
                                jjCheckNAdd(2);
                            }
                            break;
                            case 3:
                                if ((0x3ff000000000000L & l) != 0L && kind > 19)
                                    kind = 19;
                                break;
                            case 5:
                                if ((0x3ff000000000000L & l) == 0L)
                                    break;
                                if (kind > 16)
                                    kind = 16;
                                jjstateSet[jjnewStateCnt++] = 5;
                                break;
                            default:
                                break;
                        }
                    } while (i != startsAt);
                } else if (curChar < 128) {
                    long l = 1L << (curChar & 077);
                    do {
                        switch (jjstateSet[--i]) {
                            case 0:
                                if ((0x7fffffe07fffffeL & l) == 0L)
                                    break;
                                if (kind > 16)
                                    kind = 16;
                            {
                                jjCheckNAdd(5);
                            }
                            break;
                            case 5:
                                if ((0x7fffffe87fffffeL & l) == 0L)
                                    break;
                                if (kind > 16)
                                    kind = 16;
                            {
                                jjCheckNAdd(5);
                            }
                            break;
                            default:
                                break;
                        }
                    } while (i != startsAt);
                } else {
                    int hiByte = (curChar >> 8);
                    int i1 = hiByte >> 6;
                    long l1 = 1L << (hiByte & 077);
                    int i2 = (curChar & 0xff) >> 6;
                    long l2 = 1L << (curChar & 077);
                    do {
                        switch (jjstateSet[--i]) {
                            default:
                                if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break;
                                else break;
                        }
                    } while (i != startsAt);
                }
                if (kind != 0x7fffffff) {
                    jjmatchedKind = kind;
                    jjmatchedPos = curPos;
                    kind = 0x7fffffff;
                }
                ++curPos;
                if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
                    debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " token.");
                if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
                    return curPos;
                debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
                try {
                    curChar = input_stream.readChar();
                } catch (java.io.IOException e) {
                    return curPos;
                }
                debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int) curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
            }
        }

        static final int[] jjnextStates = {
        };

        /**
         * bioscript.parser.Token literal values.
         */
        public static final String[] jjstrLiteralImages = {
                "", null, null, null, null, null, "\155\151\170", "\163\160\154\151\164",
                "\144\162\141\151\156", "\150\145\141\164", "\146\157\162", "\141\164", "\144\145\164\145\143\164",
                "\162\145\160\145\141\164", "\151\146", "\145\154\163\145", null, null, null, null, "\50", "\51", "\133",
                "\135", "\173", "\175", "\56", "\53", "\46\46", "\75", "\41", "\74", "\76", "\55",
                "\174\174",};

        protected Token jjFillToken() {
            final Token t;
            final String curTokenImage;
            final int beginLine;
            final int endLine;
            final int beginColumn;
            final int endColumn;
            String im = jjstrLiteralImages[jjmatchedKind];
            curTokenImage = (im == null) ? input_stream.GetImage() : im;
            beginLine = input_stream.getBeginLine();
            beginColumn = input_stream.getBeginColumn();
            endLine = input_stream.getEndLine();
            endColumn = input_stream.getEndColumn();
            t = Token.newToken(jjmatchedKind, curTokenImage);

            t.beginLine = beginLine;
            t.endLine = endLine;
            t.beginColumn = beginColumn;
            t.endColumn = endColumn;

            return t;
        }

        int curLexState = 0;
        int defaultLexState = 0;
        int jjnewStateCnt;
        int jjround;
        int jjmatchedPos;
        int jjmatchedKind;

        /**
         * Get the next bioscript.parser.Token.
         */
        public Token getNextToken() {
            Token matchedToken;
            int curPos = 0;

            EOFLoop:
            for (; ; ) {
                try {
                    curChar = input_stream.BeginToken();
                } catch (java.io.IOException e) {
                    debugStream.println("Returning the <EOF> token.\n");
                    jjmatchedKind = 0;
                    jjmatchedPos = -1;
                    matchedToken = jjFillToken();
                    return matchedToken;
                }

                try {
                    input_stream.backup(0);
                    while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L) {
                        debugStream.println("Skipping character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int) curChar + ")");
                        curChar = input_stream.BeginToken();
                    }
                } catch (java.io.IOException e1) {
                    continue EOFLoop;
                }
                jjmatchedKind = 0x7fffffff;
                jjmatchedPos = 0;
                debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int) curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
                curPos = jjMoveStringLiteralDfa0_0();
                if (jjmatchedKind != 0x7fffffff) {
                    if (jjmatchedPos + 1 < curPos) {
                        debugStream.println("   Putting back " + (curPos - jjmatchedPos - 1) + " characters into the input stream.");
                        input_stream.backup(curPos - jjmatchedPos - 1);
                    }
                    debugStream.println("****** FOUND A " + BioScriptParserConstants.tokenImage[jjmatchedKind] + " MATCH (" + TokenMgrError.addEscapes(new String(input_stream.GetSuffix(jjmatchedPos + 1))) + ") ******\n");
                    if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                        matchedToken = jjFillToken();
                        return matchedToken;
                    } else {
                        continue EOFLoop;
                    }
                }
                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
                String error_after = null;
                boolean EOFSeen = false;
                try {
                    input_stream.readChar();
                    input_stream.backup(1);
                } catch (java.io.IOException e1) {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                        error_line++;
                        error_column = 0;
                    } else
                        error_column++;
                }
                if (!EOFSeen) {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
            }
        }

        protected static final int[][][] statesForState = {
                {
                        {0, 1, 3, 4,},
                        {0, 1, 3, 4,},
                        {2},
                        {0, 1, 3, 4,},
                        {0, 1, 3, 4,},
                        {5},
                },

        };
        protected static final int[][] kindForState = {
                {
                        17,
                        17,
                        17,
                        19,
                        16,
                        16,}
        };
        int kindCnt = 0;

        protected final String jjKindsForBitVector(int i, long vec) {
            String retVal = "";
            if (i == 0)
                kindCnt = 0;
            for (int j = 0; j < 64; j++) {
                if ((vec & (1L << j)) != 0L) {
                    if (kindCnt++ > 0)
                        retVal += ", ";
                    if (kindCnt % 5 == 0)
                        retVal += "\n     ";
                    retVal += BioScriptParserConstants.tokenImage[i * 64 + j];
                }
            }
            return retVal;
        }


        protected final String jjKindsForStateVector(int lexState, int[] vec, int start, int end) {
            boolean[] kindDone = new boolean[35];
            String retVal = "";
            int cnt = 0;
            for (int i = start; i < end; i++) {
                if (vec[i] == -1)
                    continue;
                int[] stateSet = statesForState[curLexState][vec[i]];
                for (int j = 0; j < stateSet.length; j++) {
                    int state = stateSet[j];
                    if (!kindDone[kindForState[lexState][state]]) {
                        kindDone[kindForState[lexState][state]] = true;
                        if (cnt++ > 0)
                            retVal += ", ";
                        if (cnt % 5 == 0)
                            retVal += "\n     ";
                        retVal += BioScriptParserConstants.tokenImage[kindForState[lexState][state]];
                    }
                }
            }
            if (cnt == 0)
                return "{  }";
            else
                return "{ " + retVal + " }";
        }


        private void jjCheckNAdd(int state) {
            if (jjrounds[state] != jjround) {
                jjstateSet[jjnewStateCnt++] = state;
                jjrounds[state] = jjround;
            }
        }

        private void jjAddStates(int start, int end) {
            do {
                jjstateSet[jjnewStateCnt++] = jjnextStates[start];
            } while (start++ != end);
        }

        private void jjCheckNAddTwoStates(int state1, int state2) {
            jjCheckNAdd(state1);
            jjCheckNAdd(state2);
        }

        /**
         * Constructor.
         */
        public BioScriptParserTokenManager(JavaCharStream stream) {

            if (JavaCharStream.staticFlag)
                throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

            input_stream = stream;
        }

        /**
         * Constructor.
         */
        public BioScriptParserTokenManager(JavaCharStream stream, int lexState) {
            ReInit(stream);
            SwitchTo(lexState);
        }

        /**
         * Reinitialise parser.
         */
        public void ReInit(JavaCharStream stream) {
            jjmatchedPos = jjnewStateCnt = 0;
            curLexState = defaultLexState;
            input_stream = stream;
            ReInitRounds();
        }

        private void ReInitRounds() {
            int i;
            jjround = 0x80000001;
            for (i = 6; i-- > 0; )
                jjrounds[i] = 0x80000000;
        }

        /**
         * Reinitialise parser.
         */
        public void ReInit(JavaCharStream stream, int lexState) {
            ReInit(stream);
            SwitchTo(lexState);
        }

        /**
         * Switch to specified lex state.
         */
        public void SwitchTo(int lexState) {
            if (lexState >= 1 || lexState < 0)
                throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
            else
                curLexState = lexState;
        }

        /**
         * Lexer state names.
         */
        public static final String[] lexStateNames = {
                "DEFAULT",
        };
        static final long[] jjtoToken = {
                0x7ffffffc1L,
        };
        static final long[] jjtoSkip = {
                0x3eL,
        };
        protected JavaCharStream input_stream;

        private final int[] jjrounds = new int[6];
        private final int[] jjstateSet = new int[2 * 6];


        protected char curChar;
    }
}
/* JavaCC - OriginalChecksum=26384494e096fff2d984212006e03bb2 (do not edit this line) */
