/* MJParser.java */
/* Generated By:JavaCC: Do not edit this line. MJParser.java */
package minijava.parser;

import minijava.ast.AllocationExpression;
import minijava.ast.AndExpression;
import minijava.ast.ArrayAllocationExpression;
import minijava.ast.ArrayAssignmentStatement;
import minijava.ast.ArrayLength;
import minijava.ast.ArrayLookup;
import minijava.ast.ArrayType;
import minijava.ast.AssignmentStatement;
import minijava.ast.Block;
import minijava.ast.BooleanType;
import minijava.ast.BranchStatement;
import minijava.ast.ClassDeclaration;
import minijava.ast.ClassExtendsDeclaration;
import minijava.ast.Comment;
import minijava.ast.CompareExpression;
import minijava.ast.Expression;
import minijava.ast.ExpressionList;
import minijava.ast.ExpressionRest;
import minijava.ast.FalseLiteral;
import minijava.ast.FormalParameter;
import minijava.ast.FormalParameterList;
import minijava.ast.FormalParameterRest;
import minijava.ast.Goal;
import minijava.ast.Identifier;
import minijava.ast.IntegerLiteral;
import minijava.ast.IntegerType;
import minijava.ast.MainClass;
import minijava.ast.MessageSend;
import minijava.ast.MethodDeclarationUnordered;
import minijava.ast.MinusExpression;
import minijava.ast.NodeChoice;
import minijava.ast.NodeListOptional;
import minijava.ast.NodeOptional;
import minijava.ast.NodeSequence;
import minijava.ast.NodeToken;
import minijava.ast.NotExpression;
import minijava.ast.ParanthesisExpression;
import minijava.ast.PlusExpression;
import minijava.ast.PrimaryExpression;
import minijava.ast.PrintStatement;
import minijava.ast.Statement;
import minijava.ast.ThisExpression;
import minijava.ast.TimesExpression;
import minijava.ast.TrueLiteral;
import minijava.ast.Type;
import minijava.ast.TypeDeclarationUnordered;
import minijava.ast.VarDeclarationUnordered;
import minijava.ast.WhileStatement;


public class MJParser implements MJParserConstants {

    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    final private int[] jj_la1 = new int[23];
    final private JJCalls[] jj_2_rtns = new JJCalls[14];
    final private LookaheadSuccess jj_ls = new LookaheadSuccess();
    /**
     * Generated Token Manager.
     */
    public MJParserTokenManager token_source;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    JavaCharStream jj_input_stream;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    private boolean jj_rescan = false;
    private int jj_gc = 0;
    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;
    private int trace_indent = 0;
    private boolean trace_enabled = true;

    /**
     * Constructor with InputStream.
     */
    public MJParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public MJParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new MJParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 23; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor.
     */
    public MJParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new MJParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 23; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor with generated Token Manager.
     */
    public MJParser(MJParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 23; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x40000000, 0x40000000, 0x1c0, 0x20000000, 0x0, 0x1c0, 0x20000000, 0x0, 0x20000000, 0x1c0, 0x2000, 0x0, 0x20000000, 0x2000, 0x0, 0x2000, 0x0, 0x10000200, 0x10000200, 0x0, 0x0, 0x10000200, 0x1c0,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x0, 0x100040, 0x400, 0x0, 0x100040, 0x400, 0x100040, 0x0, 0x110033, 0x40000, 0x100040, 0x0, 0x10033, 0x110033, 0x13, 0x18c208, 0x18c208, 0x40000, 0x18c008, 0x200, 0x0,};
    }

    final public Goal Goal() throws ParseException {
        trace_call("Goal");
        try {
            MainClass n0;
            NodeListOptional n1 = new NodeListOptional();
            TypeDeclarationUnordered n2;
            NodeToken n3;
            Token n4;
            n0 = MainClass();
            label_1:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case CLASS: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                }
                n2 = TypeDeclarationUnordered();
                n1.addNode(n2);
            }
            n1.nodes.trimToSize();
            n4 = jj_consume_token(0);
            n4.beginColumn++;
            n4.endColumn++;
            n3 = JTBToolkit.makeNodeToken(n4);
            {
                if ("" != null) return new Goal(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Goal");
        }
    }

    final public MainClass MainClass() throws ParseException {
        trace_call("MainClass");
        try {
            NodeToken n0;
            Token n1;
            Identifier n2;
            NodeToken n3;
            Token n4;
            NodeToken n5;
            Token n6;
            NodeToken n7;
            Token n8;
            NodeToken n9;
            Token n10;
            NodeToken n11;
            Token n12;
            NodeToken n13;
            Token n14;
            NodeToken n15;
            Token n16;
            NodeToken n17;
            Token n18;
            NodeToken n19;
            Token n20;
            Identifier n21;
            NodeToken n22;
            Token n23;
            NodeToken n24;
            Token n25;
            PrintStatement n26;
            NodeToken n27;
            Token n28;
            NodeToken n29;
            Token n30;
            n1 = jj_consume_token(CLASS);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = Identifier();
            n4 = jj_consume_token(LBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
            n6 = jj_consume_token(PUBLIC);
            n5 = JTBToolkit.makeNodeToken(n6);
            n8 = jj_consume_token(STATIC);
            n7 = JTBToolkit.makeNodeToken(n8);
            n10 = jj_consume_token(VOID);
            n9 = JTBToolkit.makeNodeToken(n10);
            n12 = jj_consume_token(MAIN);
            n11 = JTBToolkit.makeNodeToken(n12);
            n14 = jj_consume_token(LPAREN);
            n13 = JTBToolkit.makeNodeToken(n14);
            n16 = jj_consume_token(STRING);
            n15 = JTBToolkit.makeNodeToken(n16);
            n18 = jj_consume_token(LSQPAREN);
            n17 = JTBToolkit.makeNodeToken(n18);
            n20 = jj_consume_token(RSQPAREN);
            n19 = JTBToolkit.makeNodeToken(n20);
            n21 = Identifier();
            n23 = jj_consume_token(RPAREN);
            n22 = JTBToolkit.makeNodeToken(n23);
            n25 = jj_consume_token(LBRACE);
            n24 = JTBToolkit.makeNodeToken(n25);
            n26 = PrintStatement();
            n28 = jj_consume_token(RBRACE);
            n27 = JTBToolkit.makeNodeToken(n28);
            n30 = jj_consume_token(RBRACE);
            n29 = JTBToolkit.makeNodeToken(n30);
            {
                if ("" != null)
                    return new MainClass(n0, n2, n3, n5, n7, n9, n11, n13, n15, n17, n19, n21, n22, n24, n26, n27, n29);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("MainClass");
        }
    }

    final public TypeDeclarationUnordered TypeDeclarationUnordered() throws ParseException {
        trace_call("TypeDeclarationUnordered");
        try {
            NodeChoice n0;
            ClassDeclaration n1;
            ClassExtendsDeclaration n2;
            if (jj_2_1(3)) {
                n1 = ClassDeclaration();
                n0 = new NodeChoice(n1, 0);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case CLASS: {
                        n2 = ClassExtendsDeclaration();
                        n0 = new NodeChoice(n2, 1);
                        break;
                    }
                    default:
                        jj_la1[1] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            {
                if ("" != null) return new TypeDeclarationUnordered(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("TypeDeclarationUnordered");
        }
    }

    final public ClassDeclaration ClassDeclaration() throws ParseException {
        trace_call("ClassDeclaration");
        try {
            NodeToken n0;
            Token n1;
            Identifier n2;
            NodeToken n3;
            Token n4;
            NodeListOptional n5 = new NodeListOptional();
            Comment n6;
            NodeListOptional n7 = new NodeListOptional();
            VarDeclarationUnordered n8;
            NodeListOptional n9 = new NodeListOptional();
            MethodDeclarationUnordered n10;
            NodeToken n11;
            Token n12;
            n1 = jj_consume_token(CLASS);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = Identifier();
            n4 = jj_consume_token(LBRACE);
            n3 = JTBToolkit.makeNodeToken(n4);
            label_2:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case SINGLE_LINE_COMMENT:
                    case FORMAL_COMMENT:
                    case MULTI_LINE_COMMENT: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[2] = jj_gen;
                        break label_2;
                }
                n6 = Comment();
                n5.addNode(n6);
            }
            n5.nodes.trimToSize();
            label_3:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case BOOLEAN:
                    case INTEGER:
                    case IDENTIFIER: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[3] = jj_gen;
                        break label_3;
                }
                n8 = VarDeclarationUnordered();
                n7.addNode(n8);
            }
            n7.nodes.trimToSize();
            label_4:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case PUBLIC: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[4] = jj_gen;
                        break label_4;
                }
                n10 = MethodDeclarationUnordered();
                n9.addNode(n10);
            }
            n9.nodes.trimToSize();
            n12 = jj_consume_token(RBRACE);
            n11 = JTBToolkit.makeNodeToken(n12);
            {
                if ("" != null) return new ClassDeclaration(n0, n2, n3, n5, n7, n9, n11);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ClassDeclaration");
        }
    }

    final public ClassExtendsDeclaration ClassExtendsDeclaration() throws ParseException {
        trace_call("ClassExtendsDeclaration");
        try {
            NodeToken n0;
            Token n1;
            Identifier n2;
            NodeToken n3;
            Token n4;
            Identifier n5;
            NodeToken n6;
            Token n7;
            NodeListOptional n8 = new NodeListOptional();
            Comment n9;
            NodeListOptional n10 = new NodeListOptional();
            VarDeclarationUnordered n11;
            NodeListOptional n12 = new NodeListOptional();
            MethodDeclarationUnordered n13;
            NodeToken n14;
            Token n15;
            n1 = jj_consume_token(CLASS);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = Identifier();
            n4 = jj_consume_token(EXTENDS);
            n3 = JTBToolkit.makeNodeToken(n4);
            n5 = Identifier();
            n7 = jj_consume_token(LBRACE);
            n6 = JTBToolkit.makeNodeToken(n7);
            label_5:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case SINGLE_LINE_COMMENT:
                    case FORMAL_COMMENT:
                    case MULTI_LINE_COMMENT: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[5] = jj_gen;
                        break label_5;
                }
                n9 = Comment();
                n8.addNode(n9);
            }
            n8.nodes.trimToSize();
            label_6:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case BOOLEAN:
                    case INTEGER:
                    case IDENTIFIER: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[6] = jj_gen;
                        break label_6;
                }
                n11 = VarDeclarationUnordered();
                n10.addNode(n11);
            }
            n10.nodes.trimToSize();
            label_7:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case PUBLIC: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[7] = jj_gen;
                        break label_7;
                }
                n13 = MethodDeclarationUnordered();
                n12.addNode(n13);
            }
            n12.nodes.trimToSize();
            n15 = jj_consume_token(RBRACE);
            n14 = JTBToolkit.makeNodeToken(n15);
            {
                if ("" != null)
                    return new ClassExtendsDeclaration(n0, n2, n3, n5, n6, n8, n10, n12, n14);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ClassExtendsDeclaration");
        }
    }

    final public VarDeclarationUnordered VarDeclarationUnordered() throws ParseException {
        trace_call("VarDeclarationUnordered");
        try {
            Type n0;
            Identifier n1;
            NodeToken n2;
            Token n3;
            n0 = Type();
            n1 = Identifier();
            n3 = jj_consume_token(SEMICOLON);
            n2 = JTBToolkit.makeNodeToken(n3);
            {
                if ("" != null) return new VarDeclarationUnordered(n0, n1, n2);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("VarDeclarationUnordered");
        }
    }

    final public MethodDeclarationUnordered MethodDeclarationUnordered() throws ParseException {
        trace_call("MethodDeclarationUnordered");
        try {
            NodeToken n0;
            Token n1;
            Type n2;
            Identifier n3;
            NodeToken n4;
            Token n5;
            NodeOptional n6 = new NodeOptional();
            FormalParameterList n7;
            NodeToken n8;
            Token n9;
            NodeToken n10;
            Token n11;
            NodeListOptional n12 = new NodeListOptional();
            Comment n13;
            NodeListOptional n14 = new NodeListOptional();
            VarDeclarationUnordered n15;
            NodeListOptional n16 = new NodeListOptional();
            Statement n17;
            NodeToken n18;
            Token n19;
            Expression n20;
            NodeToken n21;
            Token n22;
            NodeToken n23;
            Token n24;
            n1 = jj_consume_token(PUBLIC);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = Type();
            n3 = Identifier();
            n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BOOLEAN:
                case INTEGER:
                case IDENTIFIER: {
                    n7 = FormalParameterList();
                    n6.addNode(n7);
                    break;
                }
                default:
                    jj_la1[8] = jj_gen;
                    ;
            }
            n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
            n11 = jj_consume_token(LBRACE);
            n10 = JTBToolkit.makeNodeToken(n11);
            label_8:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case SINGLE_LINE_COMMENT:
                    case FORMAL_COMMENT:
                    case MULTI_LINE_COMMENT: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[9] = jj_gen;
                        break label_8;
                }
                n13 = Comment();
                n12.addNode(n13);
            }
            n12.nodes.trimToSize();
            label_9:
            while (true) {
                if (jj_2_2(2)) {
                    ;
                } else {
                    break label_9;
                }
                n15 = VarDeclarationUnordered();
                n14.addNode(n15);
            }
            n14.nodes.trimToSize();
            label_10:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LBRACE:
                    case ELSE:
                    case ELSE_IF:
                    case IF:
                    case WHILE:
                    case PRINT:
                    case IDENTIFIER: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[10] = jj_gen;
                        break label_10;
                }
                n17 = Statement();
                n16.addNode(n17);
            }
            n16.nodes.trimToSize();
            n19 = jj_consume_token(RETURN);
            n18 = JTBToolkit.makeNodeToken(n19);
            n20 = Expression();
            n22 = jj_consume_token(SEMICOLON);
            n21 = JTBToolkit.makeNodeToken(n22);
            n24 = jj_consume_token(RBRACE);
            n23 = JTBToolkit.makeNodeToken(n24);
            {
                if ("" != null)
                    return new MethodDeclarationUnordered(n0, n2, n3, n4, n6, n8, n10, n12, n14, n16, n18, n20, n21, n23);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("MethodDeclarationUnordered");
        }
    }

    final public FormalParameterList FormalParameterList() throws ParseException {
        trace_call("FormalParameterList");
        try {
            FormalParameter n0;
            NodeListOptional n1 = new NodeListOptional();
            FormalParameterRest n2;
            n0 = FormalParameter();
            label_11:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[11] = jj_gen;
                        break label_11;
                }
                n2 = FormalParameterRest();
                n1.addNode(n2);
            }
            n1.nodes.trimToSize();
            {
                if ("" != null) return new FormalParameterList(n0, n1);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("FormalParameterList");
        }
    }

    final public FormalParameter FormalParameter() throws ParseException {
        trace_call("FormalParameter");
        try {
            Type n0;
            Identifier n1;
            n0 = Type();
            n1 = Identifier();
            {
                if ("" != null) return new FormalParameter(n0, n1);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("FormalParameter");
        }
    }

    final public FormalParameterRest FormalParameterRest() throws ParseException {
        trace_call("FormalParameterRest");
        try {
            NodeToken n0;
            Token n1;
            FormalParameter n2;
            n1 = jj_consume_token(COMMA);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = FormalParameter();
            {
                if ("" != null) return new FormalParameterRest(n0, n2);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("FormalParameterRest");
        }
    }

    final public Type Type() throws ParseException {
        trace_call("Type");
        try {
            NodeChoice n0;
            ArrayType n1;
            BooleanType n2;
            IntegerType n3;
            Identifier n4;
            if (jj_2_3(3)) {
                n1 = ArrayType();
                n0 = new NodeChoice(n1, 0);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case BOOLEAN: {
                        n2 = BooleanType();
                        n0 = new NodeChoice(n2, 1);
                        break;
                    }
                    case INTEGER: {
                        n3 = IntegerType();
                        n0 = new NodeChoice(n3, 2);
                        break;
                    }
                    case IDENTIFIER: {
                        n4 = Identifier();
                        n0 = new NodeChoice(n4, 3);
                        break;
                    }
                    default:
                        jj_la1[12] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            {
                if ("" != null) return new Type(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Type");
        }
    }

    final public ArrayType ArrayType() throws ParseException {
        trace_call("ArrayType");
        try {
            NodeToken n0;
            Token n1;
            NodeToken n2;
            Token n3;
            NodeToken n4;
            Token n5;
            n1 = jj_consume_token(INTEGER);
            n0 = JTBToolkit.makeNodeToken(n1);
            n3 = jj_consume_token(LSQPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
            n5 = jj_consume_token(RSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
            {
                if ("" != null) return new ArrayType(n0, n2, n4);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ArrayType");
        }
    }

    final public BooleanType BooleanType() throws ParseException {
        trace_call("BooleanType");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(BOOLEAN);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new BooleanType(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("BooleanType");
        }
    }

    final public IntegerType IntegerType() throws ParseException {
        trace_call("IntegerType");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(INTEGER);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new IntegerType(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("IntegerType");
        }
    }

    final public Statement Statement() throws ParseException {
        trace_call("Statement");
        try {
            NodeChoice n0;
            Block n1;
            AssignmentStatement n2;
            ArrayAssignmentStatement n3;
            BranchStatement n4;
            WhileStatement n5;
            PrintStatement n6;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBRACE: {
                    n1 = Block();
                    n0 = new NodeChoice(n1, 0);
                    break;
                }
                default:
                    jj_la1[13] = jj_gen;
                    if (jj_2_4(2)) {
                        n2 = AssignmentStatement();
                        n0 = new NodeChoice(n2, 1);
                    } else if (jj_2_5(2)) {
                        n3 = ArrayAssignmentStatement();
                        n0 = new NodeChoice(n3, 2);
                    } else {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case ELSE:
                            case ELSE_IF:
                            case IF: {
                                n4 = BranchStatement();
                                n0 = new NodeChoice(n4, 3);
                                break;
                            }
                            case WHILE: {
                                n5 = WhileStatement();
                                n0 = new NodeChoice(n5, 4);
                                break;
                            }
                            case PRINT: {
                                n6 = PrintStatement();
                                n0 = new NodeChoice(n6, 5);
                                break;
                            }
                            default:
                                jj_la1[14] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                    }
            }
            {
                if ("" != null) return new Statement(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Statement");
        }
    }

    final public Block Block() throws ParseException {
        trace_call("Block");
        try {
            NodeToken n0;
            Token n1;
            NodeListOptional n2 = new NodeListOptional();
            Statement n3;
            NodeToken n4;
            Token n5;
            n1 = jj_consume_token(LBRACE);
            n0 = JTBToolkit.makeNodeToken(n1);
            label_12:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LBRACE:
                    case ELSE:
                    case ELSE_IF:
                    case IF:
                    case WHILE:
                    case PRINT:
                    case IDENTIFIER: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[15] = jj_gen;
                        break label_12;
                }
                n3 = Statement();
                n2.addNode(n3);
            }
            n2.nodes.trimToSize();
            n5 = jj_consume_token(RBRACE);
            n4 = JTBToolkit.makeNodeToken(n5);
            {
                if ("" != null) return new Block(n0, n2, n4);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Block");
        }
    }

    final public AssignmentStatement AssignmentStatement() throws ParseException {
        trace_call("AssignmentStatement");
        try {
            Identifier n0;
            NodeToken n1;
            Token n2;
            Expression n3;
            NodeToken n4;
            Token n5;
            n0 = Identifier();
            n2 = jj_consume_token(ASSIGN);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = Expression();
            n5 = jj_consume_token(SEMICOLON);
            n4 = JTBToolkit.makeNodeToken(n5);
            {
                if ("" != null) return new AssignmentStatement(n0, n1, n3, n4);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("AssignmentStatement");
        }
    }

    final public ArrayAssignmentStatement ArrayAssignmentStatement() throws ParseException {
        trace_call("ArrayAssignmentStatement");
        try {
            Identifier n0;
            NodeToken n1;
            Token n2;
            Expression n3;
            NodeToken n4;
            Token n5;
            NodeToken n6;
            Token n7;
            Expression n8;
            NodeToken n9;
            Token n10;
            n0 = Identifier();
            n2 = jj_consume_token(LSQPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = Expression();
            n5 = jj_consume_token(RSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
            n7 = jj_consume_token(ASSIGN);
            n6 = JTBToolkit.makeNodeToken(n7);
            n8 = Expression();
            n10 = jj_consume_token(SEMICOLON);
            n9 = JTBToolkit.makeNodeToken(n10);
            {
                if ("" != null) return new ArrayAssignmentStatement(n0, n1, n3, n4, n6, n8, n9);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ArrayAssignmentStatement");
        }
    }

    final public BranchStatement BranchStatement() throws ParseException {
        trace_call("BranchStatement");
        try {
            NodeChoice n0;
            NodeSequence n1;
            NodeToken n2;
            Token n3;
            NodeToken n4;
            Token n5;
            Expression n6;
            NodeToken n7;
            Token n8;
            NodeToken n9;
            Token n10;
            Statement n11;
            NodeToken n12;
            Token n13;
            NodeSequence n14;
            NodeToken n15;
            Token n16;
            NodeToken n17;
            Token n18;
            Expression n19;
            NodeToken n20;
            Token n21;
            NodeToken n22;
            Token n23;
            Statement n24;
            NodeToken n25;
            Token n26;
            NodeSequence n27;
            NodeToken n28;
            Token n29;
            NodeToken n30;
            Token n31;
            Statement n32;
            NodeToken n33;
            Token n34;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case IF: {
                    n1 = new NodeSequence(7);
                    n3 = jj_consume_token(IF);
                    n2 = JTBToolkit.makeNodeToken(n3);
                    n1.addNode(n2);
                    n5 = jj_consume_token(LPAREN);
                    n4 = JTBToolkit.makeNodeToken(n5);
                    n1.addNode(n4);
                    n6 = Expression();
                    n1.addNode(n6);
                    n8 = jj_consume_token(RPAREN);
                    n7 = JTBToolkit.makeNodeToken(n8);
                    n1.addNode(n7);
                    n10 = jj_consume_token(LBRACE);
                    n9 = JTBToolkit.makeNodeToken(n10);
                    n1.addNode(n9);
                    n11 = Statement();
                    n1.addNode(n11);
                    n13 = jj_consume_token(RBRACE);
                    n12 = JTBToolkit.makeNodeToken(n13);
                    n1.addNode(n12);
                    n0 = new NodeChoice(n1, 0);
                    break;
                }
                case ELSE_IF: {
                    n14 = new NodeSequence(7);
                    n16 = jj_consume_token(ELSE_IF);
                    n15 = JTBToolkit.makeNodeToken(n16);
                    n14.addNode(n15);
                    n18 = jj_consume_token(LPAREN);
                    n17 = JTBToolkit.makeNodeToken(n18);
                    n14.addNode(n17);
                    n19 = Expression();
                    n14.addNode(n19);
                    n21 = jj_consume_token(RPAREN);
                    n20 = JTBToolkit.makeNodeToken(n21);
                    n14.addNode(n20);
                    n23 = jj_consume_token(LBRACE);
                    n22 = JTBToolkit.makeNodeToken(n23);
                    n14.addNode(n22);
                    n24 = Statement();
                    n14.addNode(n24);
                    n26 = jj_consume_token(RBRACE);
                    n25 = JTBToolkit.makeNodeToken(n26);
                    n14.addNode(n25);
                    n0 = new NodeChoice(n14, 1);
                    break;
                }
                case ELSE: {
                    n27 = new NodeSequence(4);
                    n29 = jj_consume_token(ELSE);
                    n28 = JTBToolkit.makeNodeToken(n29);
                    n27.addNode(n28);
                    n31 = jj_consume_token(LBRACE);
                    n30 = JTBToolkit.makeNodeToken(n31);
                    n27.addNode(n30);
                    n32 = Statement();
                    n27.addNode(n32);
                    n34 = jj_consume_token(RBRACE);
                    n33 = JTBToolkit.makeNodeToken(n34);
                    n27.addNode(n33);
                    n0 = new NodeChoice(n27, 2);
                    break;
                }
                default:
                    jj_la1[16] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            {
                if ("" != null) return new BranchStatement(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("BranchStatement");
        }
    }

    final public WhileStatement WhileStatement() throws ParseException {
        trace_call("WhileStatement");
        try {
            NodeToken n0;
            Token n1;
            NodeToken n2;
            Token n3;
            Expression n4;
            NodeToken n5;
            Token n6;
            Statement n7;
            n1 = jj_consume_token(WHILE);
            n0 = JTBToolkit.makeNodeToken(n1);
            n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
            n4 = Expression();
            n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
            n7 = Statement();
            {
                if ("" != null) return new WhileStatement(n0, n2, n4, n5, n7);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("WhileStatement");
        }
    }

    final public PrintStatement PrintStatement() throws ParseException {
        trace_call("PrintStatement");
        try {
            NodeToken n0;
            Token n1;
            NodeToken n2;
            Token n3;
            Expression n4;
            NodeToken n5;
            Token n6;
            NodeToken n7;
            Token n8;
            n1 = jj_consume_token(PRINT);
            n0 = JTBToolkit.makeNodeToken(n1);
            n3 = jj_consume_token(LPAREN);
            n2 = JTBToolkit.makeNodeToken(n3);
            n4 = Expression();
            n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
            n8 = jj_consume_token(SEMICOLON);
            n7 = JTBToolkit.makeNodeToken(n8);
            {
                if ("" != null) return new PrintStatement(n0, n2, n4, n5, n7);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("PrintStatement");
        }
    }

    final public Expression Expression() throws ParseException {
        trace_call("Expression");
        try {
            NodeChoice n0;
            AndExpression n1;
            CompareExpression n2;
            PlusExpression n3;
            MinusExpression n4;
            TimesExpression n5;
            ArrayLookup n6;
            ArrayLength n7;
            MessageSend n8;
            PrimaryExpression n9;
            if (jj_2_6(2147483647)) {
                n1 = AndExpression();
                n0 = new NodeChoice(n1, 0);
            } else if (jj_2_7(2147483647)) {
                n2 = CompareExpression();
                n0 = new NodeChoice(n2, 1);
            } else if (jj_2_8(2147483647)) {
                n3 = PlusExpression();
                n0 = new NodeChoice(n3, 2);
            } else if (jj_2_9(2147483647)) {
                n4 = MinusExpression();
                n0 = new NodeChoice(n4, 3);
            } else if (jj_2_10(2147483647)) {
                n5 = TimesExpression();
                n0 = new NodeChoice(n5, 4);
            } else if (jj_2_11(2147483647)) {
                n6 = ArrayLookup();
                n0 = new NodeChoice(n6, 5);
            } else if (jj_2_12(2147483647)) {
                n7 = ArrayLength();
                n0 = new NodeChoice(n7, 6);
            } else if (jj_2_13(2147483647)) {
                n8 = MessageSend();
                n0 = new NodeChoice(n8, 7);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case LPAREN:
                    case NOT:
                    case FALSE:
                    case NEW:
                    case THIS:
                    case TRUE:
                    case INTEGER_LITERAL:
                    case IDENTIFIER: {
                        n9 = PrimaryExpression();
                        n0 = new NodeChoice(n9, 8);
                        break;
                    }
                    default:
                        jj_la1[17] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            {
                if ("" != null) return new Expression(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Expression");
        }
    }

    final public AndExpression AndExpression() throws ParseException {
        trace_call("AndExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(AND);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new AndExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("AndExpression");
        }
    }

    final public CompareExpression CompareExpression() throws ParseException {
        trace_call("CompareExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(LT);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new CompareExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("CompareExpression");
        }
    }

    final public PlusExpression PlusExpression() throws ParseException {
        trace_call("PlusExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(PLUS);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new PlusExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("PlusExpression");
        }
    }

    final public MinusExpression MinusExpression() throws ParseException {
        trace_call("MinusExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(MINUS);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new MinusExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("MinusExpression");
        }
    }

    final public TimesExpression TimesExpression() throws ParseException {
        trace_call("TimesExpression");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(MULTIPLY);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            {
                if ("" != null) return new TimesExpression(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("TimesExpression");
        }
    }

    final public ArrayLookup ArrayLookup() throws ParseException {
        trace_call("ArrayLookup");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            PrimaryExpression n3;
            NodeToken n4;
            Token n5;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(LSQPAREN);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = PrimaryExpression();
            n5 = jj_consume_token(RSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
            {
                if ("" != null) return new ArrayLookup(n0, n1, n3, n4);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ArrayLookup");
        }
    }

    final public ArrayLength ArrayLength() throws ParseException {
        trace_call("ArrayLength");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            NodeToken n3;
            Token n4;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
            n4 = jj_consume_token(LENGTH);
            n3 = JTBToolkit.makeNodeToken(n4);
            {
                if ("" != null) return new ArrayLength(n0, n1, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ArrayLength");
        }
    }

    final public MessageSend MessageSend() throws ParseException {
        trace_call("MessageSend");
        try {
            PrimaryExpression n0;
            NodeToken n1;
            Token n2;
            Identifier n3;
            NodeToken n4;
            Token n5;
            NodeOptional n6 = new NodeOptional();
            ExpressionList n7;
            NodeToken n8;
            Token n9;
            n0 = PrimaryExpression();
            n2 = jj_consume_token(DOT);
            n1 = JTBToolkit.makeNodeToken(n2);
            n3 = Identifier();
            n5 = jj_consume_token(LPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LPAREN:
                case NOT:
                case FALSE:
                case NEW:
                case THIS:
                case TRUE:
                case INTEGER_LITERAL:
                case IDENTIFIER: {
                    n7 = ExpressionList();
                    n6.addNode(n7);
                    break;
                }
                default:
                    jj_la1[18] = jj_gen;
                    ;
            }
            n9 = jj_consume_token(RPAREN);
            n8 = JTBToolkit.makeNodeToken(n9);
            {
                if ("" != null) return new MessageSend(n0, n1, n3, n4, n6, n8);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("MessageSend");
        }
    }

    final public ExpressionList ExpressionList() throws ParseException {
        trace_call("ExpressionList");
        try {
            Expression n0;
            NodeListOptional n1 = new NodeListOptional();
            ExpressionRest n2;
            n0 = Expression();
            label_13:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[19] = jj_gen;
                        break label_13;
                }
                n2 = ExpressionRest();
                n1.addNode(n2);
            }
            n1.nodes.trimToSize();
            {
                if ("" != null) return new ExpressionList(n0, n1);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ExpressionList");
        }
    }

    final public ExpressionRest ExpressionRest() throws ParseException {
        trace_call("ExpressionRest");
        try {
            NodeToken n0;
            Token n1;
            Expression n2;
            n1 = jj_consume_token(COMMA);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = Expression();
            {
                if ("" != null) return new ExpressionRest(n0, n2);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ExpressionRest");
        }
    }

    final public PrimaryExpression PrimaryExpression() throws ParseException {
        trace_call("PrimaryExpression");
        try {
            NodeChoice n0;
            IntegerLiteral n1;
            TrueLiteral n2;
            FalseLiteral n3;
            Identifier n4;
            ThisExpression n5;
            ArrayAllocationExpression n6;
            AllocationExpression n7;
            NotExpression n8;
            ParanthesisExpression n9;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case INTEGER_LITERAL: {
                    n1 = IntegerLiteral();
                    n0 = new NodeChoice(n1, 0);
                    break;
                }
                case TRUE: {
                    n2 = TrueLiteral();
                    n0 = new NodeChoice(n2, 1);
                    break;
                }
                case FALSE: {
                    n3 = FalseLiteral();
                    n0 = new NodeChoice(n3, 2);
                    break;
                }
                case IDENTIFIER: {
                    n4 = Identifier();
                    n0 = new NodeChoice(n4, 3);
                    break;
                }
                case THIS: {
                    n5 = ThisExpression();
                    n0 = new NodeChoice(n5, 4);
                    break;
                }
                default:
                    jj_la1[20] = jj_gen;
                    if (jj_2_14(3)) {
                        n6 = ArrayAllocationExpression();
                        n0 = new NodeChoice(n6, 5);
                    } else {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case NEW: {
                                n7 = AllocationExpression();
                                n0 = new NodeChoice(n7, 6);
                                break;
                            }
                            case NOT: {
                                n8 = NotExpression();
                                n0 = new NodeChoice(n8, 7);
                                break;
                            }
                            case LPAREN: {
                                n9 = ParanthesisExpression();
                                n0 = new NodeChoice(n9, 8);
                                break;
                            }
                            default:
                                jj_la1[21] = jj_gen;
                                jj_consume_token(-1);
                                throw new ParseException();
                        }
                    }
            }
            {
                if ("" != null) return new PrimaryExpression(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("PrimaryExpression");
        }
    }

    final public IntegerLiteral IntegerLiteral() throws ParseException {
        trace_call("IntegerLiteral");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(INTEGER_LITERAL);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new IntegerLiteral(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("IntegerLiteral");
        }
    }

    final public TrueLiteral TrueLiteral() throws ParseException {
        trace_call("TrueLiteral");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(TRUE);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new TrueLiteral(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("TrueLiteral");
        }
    }

    final public FalseLiteral FalseLiteral() throws ParseException {
        trace_call("FalseLiteral");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(FALSE);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new FalseLiteral(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("FalseLiteral");
        }
    }

    final public Identifier Identifier() throws ParseException {
        trace_call("Identifier");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(IDENTIFIER);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new Identifier(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Identifier");
        }
    }

    final public ThisExpression ThisExpression() throws ParseException {
        trace_call("ThisExpression");
        try {
            NodeToken n0;
            Token n1;
            n1 = jj_consume_token(THIS);
            n0 = JTBToolkit.makeNodeToken(n1);
            {
                if ("" != null) return new ThisExpression(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ThisExpression");
        }
    }

    final public ArrayAllocationExpression ArrayAllocationExpression() throws ParseException {
        trace_call("ArrayAllocationExpression");
        try {
            NodeToken n0;
            Token n1;
            NodeToken n2;
            Token n3;
            NodeToken n4;
            Token n5;
            Expression n6;
            NodeToken n7;
            Token n8;
            n1 = jj_consume_token(NEW);
            n0 = JTBToolkit.makeNodeToken(n1);
            n3 = jj_consume_token(INTEGER);
            n2 = JTBToolkit.makeNodeToken(n3);
            n5 = jj_consume_token(LSQPAREN);
            n4 = JTBToolkit.makeNodeToken(n5);
            n6 = Expression();
            n8 = jj_consume_token(RSQPAREN);
            n7 = JTBToolkit.makeNodeToken(n8);
            {
                if ("" != null) return new ArrayAllocationExpression(n0, n2, n4, n6, n7);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ArrayAllocationExpression");
        }
    }

    final public AllocationExpression AllocationExpression() throws ParseException {
        trace_call("AllocationExpression");
        try {
            NodeToken n0;
            Token n1;
            Identifier n2;
            NodeToken n3;
            Token n4;
            NodeToken n5;
            Token n6;
            n1 = jj_consume_token(NEW);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = Identifier();
            n4 = jj_consume_token(LPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
            n6 = jj_consume_token(RPAREN);
            n5 = JTBToolkit.makeNodeToken(n6);
            {
                if ("" != null) return new AllocationExpression(n0, n2, n3, n5);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("AllocationExpression");
        }
    }

    final public NotExpression NotExpression() throws ParseException {
        trace_call("NotExpression");
        try {
            NodeToken n0;
            Token n1;
            Expression n2;
            n1 = jj_consume_token(NOT);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = Expression();
            {
                if ("" != null) return new NotExpression(n0, n2);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("NotExpression");
        }
    }

    final public ParanthesisExpression ParanthesisExpression() throws ParseException {
        trace_call("ParanthesisExpression");
        try {
            NodeToken n0;
            Token n1;
            Expression n2;
            NodeToken n3;
            Token n4;
            n1 = jj_consume_token(LPAREN);
            n0 = JTBToolkit.makeNodeToken(n1);
            n2 = Expression();
            n4 = jj_consume_token(RPAREN);
            n3 = JTBToolkit.makeNodeToken(n4);
            {
                if ("" != null) return new ParanthesisExpression(n0, n2, n3);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ParanthesisExpression");
        }
    }

    final public Comment Comment() throws ParseException {
        trace_call("Comment");
        try {
            NodeChoice n0;
            NodeToken n1;
            Token n2;
            NodeToken n3;
            Token n4;
            NodeToken n5;
            Token n6;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SINGLE_LINE_COMMENT: {
                    n2 = jj_consume_token(SINGLE_LINE_COMMENT);
                    n1 = JTBToolkit.makeNodeToken(n2);
                    n0 = new NodeChoice(n1, 0);
                    break;
                }
                case FORMAL_COMMENT: {
                    n4 = jj_consume_token(FORMAL_COMMENT);
                    n3 = JTBToolkit.makeNodeToken(n4);
                    n0 = new NodeChoice(n3, 1);
                    break;
                }
                case MULTI_LINE_COMMENT: {
                    n6 = jj_consume_token(MULTI_LINE_COMMENT);
                    n5 = JTBToolkit.makeNodeToken(n6);
                    n0 = new NodeChoice(n5, 2);
                    break;
                }
                default:
                    jj_la1[22] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            {
                if ("" != null) return new Comment(n0);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Comment");
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_9();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_10();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_11();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_12();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_13();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_14();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_3R_30() {
        if (jj_3R_40()) return true;
        return false;
    }

    private boolean jj_3R_29() {
        if (jj_3R_39()) return true;
        return false;
    }

    private boolean jj_3R_28() {
        if (jj_3R_38()) return true;
        return false;
    }

    private boolean jj_3_2() {
        if (jj_3R_15()) return true;
        return false;
    }

    private boolean jj_3_14() {
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3R_21() {
        if (!jj_rescan) trace_call("ArrayAllocationExpression(LOOKING AHEAD...)");
        if (jj_scan_token(NEW)) {
            if (!jj_rescan) trace_return("ArrayAllocationExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(INTEGER)) {
            if (!jj_rescan) trace_return("ArrayAllocationExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LSQPAREN)) {
            if (!jj_rescan) trace_return("ArrayAllocationExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_43()) {
            if (!jj_rescan) trace_return("ArrayAllocationExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(RSQPAREN)) {
            if (!jj_rescan) trace_return("ArrayAllocationExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("ArrayAllocationExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_33() {
        if (jj_3R_20()) return true;
        return false;
    }

    private boolean jj_3R_27() {
        if (jj_3R_37()) return true;
        return false;
    }

    private boolean jj_3R_54() {
        if (!jj_rescan) trace_call("CompareExpression(LOOKING AHEAD...)");
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("CompareExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LT)) {
            if (!jj_rescan) trace_return("CompareExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("CompareExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("CompareExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_32() {
        if (jj_3R_42()) return true;
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_3R_20()) return true;
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_3R_41()) return true;
        return false;
    }

    private boolean jj_3R_25() {
        if (jj_3R_36()) return true;
        return false;
    }

    private boolean jj_3R_59() {
        if (!jj_rescan) trace_call("ArrayLength(LOOKING AHEAD...)");
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("ArrayLength(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(DOT)) {
            if (!jj_rescan) trace_return("ArrayLength(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LENGTH)) {
            if (!jj_rescan) trace_return("ArrayLength(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("ArrayLength(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_24() {
        if (jj_3R_35()) return true;
        return false;
    }

    private boolean jj_3_3() {
        if (jj_3R_16()) return true;
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_3R_34()) return true;
        return false;
    }

    private boolean jj_3R_22() {
        if (!jj_rescan) trace_call("Type(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_3()) {
            jj_scanpos = xsp;
            if (jj_3R_31()) {
                jj_scanpos = xsp;
                if (jj_3R_32()) {
                    jj_scanpos = xsp;
                    if (jj_3R_33()) {
                        if (!jj_rescan) trace_return("Type(LOOKAHEAD FAILED)");
                        return true;
                    }
                }
            }
        }
        {
            if (!jj_rescan) trace_return("Type(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_19() {
        if (!jj_rescan) trace_call("PrimaryExpression(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_23()) {
            jj_scanpos = xsp;
            if (jj_3R_24()) {
                jj_scanpos = xsp;
                if (jj_3R_25()) {
                    jj_scanpos = xsp;
                    if (jj_3R_26()) {
                        jj_scanpos = xsp;
                        if (jj_3R_27()) {
                            jj_scanpos = xsp;
                            if (jj_3_14()) {
                                jj_scanpos = xsp;
                                if (jj_3R_28()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_29()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_30()) {
                                            if (!jj_rescan)
                                                trace_return("PrimaryExpression(LOOKAHEAD FAILED)");
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        {
            if (!jj_rescan) trace_return("PrimaryExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_53() {
        if (!jj_rescan) trace_call("AndExpression(LOOKING AHEAD...)");
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("AndExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(AND)) {
            if (!jj_rescan) trace_return("AndExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("AndExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("AndExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_37() {
        if (!jj_rescan) trace_call("ThisExpression(LOOKING AHEAD...)");
        if (jj_scan_token(THIS)) {
            if (!jj_rescan) trace_return("ThisExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("ThisExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3_5() {
        if (jj_3R_18()) return true;
        return false;
    }

    private boolean jj_3R_58() {
        if (!jj_rescan) trace_call("ArrayLookup(LOOKING AHEAD...)");
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("ArrayLookup(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LSQPAREN)) {
            if (!jj_rescan) trace_return("ArrayLookup(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("ArrayLookup(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(RSQPAREN)) {
            if (!jj_rescan) trace_return("ArrayLookup(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("ArrayLookup(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3_4() {
        if (jj_3R_17()) return true;
        return false;
    }

    private boolean jj_3_13() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_3R_20()) return true;
        if (jj_scan_token(LPAREN)) return true;
        return false;
    }

    private boolean jj_3_12() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(DOT)) return true;
        if (jj_scan_token(LENGTH)) return true;
        return false;
    }

    private boolean jj_3R_20() {
        if (!jj_rescan) trace_call("Identifier(LOOKING AHEAD...)");
        if (jj_scan_token(IDENTIFIER)) {
            if (!jj_rescan) trace_return("Identifier(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("Identifier(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_52() {
        if (jj_3R_19()) return true;
        return false;
    }

    private boolean jj_3_11() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(RSQPAREN)) return true;
        return false;
    }

    private boolean jj_3R_14() {
        if (!jj_rescan) trace_call("ClassDeclaration(LOOKING AHEAD...)");
        if (jj_scan_token(CLASS)) {
            if (!jj_rescan) trace_return("ClassDeclaration(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_20()) {
            if (!jj_rescan) trace_return("ClassDeclaration(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LBRACE)) {
            if (!jj_rescan) trace_return("ClassDeclaration(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("ClassDeclaration(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_51() {
        if (jj_3R_60()) return true;
        return false;
    }

    private boolean jj_3R_40() {
        if (!jj_rescan) trace_call("ParanthesisExpression(LOOKING AHEAD...)");
        if (jj_scan_token(LPAREN)) {
            if (!jj_rescan) trace_return("ParanthesisExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_43()) {
            if (!jj_rescan) trace_return("ParanthesisExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            if (!jj_rescan) trace_return("ParanthesisExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("ParanthesisExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_64() {
        if (!jj_rescan) trace_call("ExpressionRest(LOOKING AHEAD...)");
        if (jj_scan_token(COMMA)) {
            if (!jj_rescan) trace_return("ExpressionRest(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_43()) {
            if (!jj_rescan) trace_return("ExpressionRest(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("ExpressionRest(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3_10() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(MULTIPLY)) return true;
        return false;
    }

    private boolean jj_3R_50() {
        if (jj_3R_59()) return true;
        return false;
    }

    private boolean jj_3_9() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(MINUS)) return true;
        return false;
    }

    private boolean jj_3R_18() {
        if (!jj_rescan) trace_call("ArrayAssignmentStatement(LOOKING AHEAD...)");
        if (jj_3R_20()) {
            if (!jj_rescan) trace_return("ArrayAssignmentStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LSQPAREN)) {
            if (!jj_rescan) trace_return("ArrayAssignmentStatement(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("ArrayAssignmentStatement(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_49() {
        if (jj_3R_58()) return true;
        return false;
    }

    private boolean jj_3R_36() {
        if (!jj_rescan) trace_call("FalseLiteral(LOOKING AHEAD...)");
        if (jj_scan_token(FALSE)) {
            if (!jj_rescan) trace_return("FalseLiteral(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("FalseLiteral(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_57() {
        if (!jj_rescan) trace_call("TimesExpression(LOOKING AHEAD...)");
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("TimesExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(MULTIPLY)) {
            if (!jj_rescan) trace_return("TimesExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("TimesExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("TimesExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3_8() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(PLUS)) return true;
        return false;
    }

    private boolean jj_3R_48() {
        if (jj_3R_57()) return true;
        return false;
    }

    private boolean jj_3R_15() {
        if (!jj_rescan) trace_call("VarDeclarationUnordered(LOOKING AHEAD...)");
        if (jj_3R_22()) {
            if (!jj_rescan) trace_return("VarDeclarationUnordered(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_20()) {
            if (!jj_rescan) trace_return("VarDeclarationUnordered(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("VarDeclarationUnordered(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3_7() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(LT)) return true;
        return false;
    }

    private boolean jj_3R_42() {
        if (!jj_rescan) trace_call("IntegerType(LOOKING AHEAD...)");
        if (jj_scan_token(INTEGER)) {
            if (!jj_rescan) trace_return("IntegerType(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("IntegerType(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_63() {
        if (jj_3R_64()) return true;
        return false;
    }

    private boolean jj_3R_47() {
        if (jj_3R_56()) return true;
        return false;
    }

    private boolean jj_3R_39() {
        if (!jj_rescan) trace_call("NotExpression(LOOKING AHEAD...)");
        if (jj_scan_token(NOT)) {
            if (!jj_rescan) trace_return("NotExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_43()) {
            if (!jj_rescan) trace_return("NotExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("NotExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3_6() {
        if (jj_3R_19()) return true;
        if (jj_scan_token(AND)) return true;
        return false;
    }

    private boolean jj_3R_46() {
        if (jj_3R_55()) return true;
        return false;
    }

    private boolean jj_3R_62() {
        if (!jj_rescan) trace_call("ExpressionList(LOOKING AHEAD...)");
        if (jj_3R_43()) {
            if (!jj_rescan) trace_return("ExpressionList(LOOKAHEAD FAILED)");
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_63()) {
                jj_scanpos = xsp;
                break;
            }
        }
        {
            if (!jj_rescan) trace_return("ExpressionList(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_35() {
        if (!jj_rescan) trace_call("TrueLiteral(LOOKING AHEAD...)");
        if (jj_scan_token(TRUE)) {
            if (!jj_rescan) trace_return("TrueLiteral(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("TrueLiteral(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_45() {
        if (jj_3R_54()) return true;
        return false;
    }

    private boolean jj_3R_56() {
        if (!jj_rescan) trace_call("MinusExpression(LOOKING AHEAD...)");
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("MinusExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(MINUS)) {
            if (!jj_rescan) trace_return("MinusExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("MinusExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("MinusExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3_1() {
        if (jj_3R_14()) return true;
        return false;
    }

    private boolean jj_3R_44() {
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_41() {
        if (!jj_rescan) trace_call("BooleanType(LOOKING AHEAD...)");
        if (jj_scan_token(BOOLEAN)) {
            if (!jj_rescan) trace_return("BooleanType(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("BooleanType(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_43() {
        if (!jj_rescan) trace_call("Expression(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_44()) {
            jj_scanpos = xsp;
            if (jj_3R_45()) {
                jj_scanpos = xsp;
                if (jj_3R_46()) {
                    jj_scanpos = xsp;
                    if (jj_3R_47()) {
                        jj_scanpos = xsp;
                        if (jj_3R_48()) {
                            jj_scanpos = xsp;
                            if (jj_3R_49()) {
                                jj_scanpos = xsp;
                                if (jj_3R_50()) {
                                    jj_scanpos = xsp;
                                    if (jj_3R_51()) {
                                        jj_scanpos = xsp;
                                        if (jj_3R_52()) {
                                            if (!jj_rescan)
                                                trace_return("Expression(LOOKAHEAD FAILED)");
                                            return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        {
            if (!jj_rescan) trace_return("Expression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_17() {
        if (!jj_rescan) trace_call("AssignmentStatement(LOOKING AHEAD...)");
        if (jj_3R_20()) {
            if (!jj_rescan) trace_return("AssignmentStatement(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(ASSIGN)) {
            if (!jj_rescan) trace_return("AssignmentStatement(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("AssignmentStatement(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_34() {
        if (!jj_rescan) trace_call("IntegerLiteral(LOOKING AHEAD...)");
        if (jj_scan_token(INTEGER_LITERAL)) {
            if (!jj_rescan) trace_return("IntegerLiteral(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("IntegerLiteral(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_61() {
        if (jj_3R_62()) return true;
        return false;
    }

    private boolean jj_3R_38() {
        if (!jj_rescan) trace_call("AllocationExpression(LOOKING AHEAD...)");
        if (jj_scan_token(NEW)) {
            if (!jj_rescan) trace_return("AllocationExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_20()) {
            if (!jj_rescan) trace_return("AllocationExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            if (!jj_rescan) trace_return("AllocationExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(RPAREN)) {
            if (!jj_rescan) trace_return("AllocationExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("AllocationExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_60() {
        if (!jj_rescan) trace_call("MessageSend(LOOKING AHEAD...)");
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("MessageSend(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(DOT)) {
            if (!jj_rescan) trace_return("MessageSend(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_20()) {
            if (!jj_rescan) trace_return("MessageSend(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LPAREN)) {
            if (!jj_rescan) trace_return("MessageSend(LOOKAHEAD FAILED)");
            return true;
        }
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_61()) jj_scanpos = xsp;
        if (jj_scan_token(RPAREN)) {
            if (!jj_rescan) trace_return("MessageSend(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("MessageSend(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_55() {
        if (!jj_rescan) trace_call("PlusExpression(LOOKING AHEAD...)");
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("PlusExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(PLUS)) {
            if (!jj_rescan) trace_return("PlusExpression(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("PlusExpression(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("PlusExpression(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_16() {
        if (!jj_rescan) trace_call("ArrayType(LOOKING AHEAD...)");
        if (jj_scan_token(INTEGER)) {
            if (!jj_rescan) trace_return("ArrayType(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(LSQPAREN)) {
            if (!jj_rescan) trace_return("ArrayType(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(RSQPAREN)) {
            if (!jj_rescan) trace_return("ArrayType(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("ArrayType(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 23; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 23; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(MJParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 23; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            trace_token(token, "");
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        } else {
            trace_scan(jj_scanpos, kind);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        trace_token(token, " (in getNextToken)");
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[55];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 23; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 55; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
        trace_enabled = true;
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
        trace_enabled = false;
    }

    private void trace_call(String s) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.println("Call:   " + s);
        }
        trace_indent = trace_indent + 2;
    }

    private void trace_return(String s) {
        trace_indent = trace_indent - 2;
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.println("Return: " + s);
        }
    }

    private void trace_token(Token t, String where) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.print("Consumed token: <" + tokenImage[t.kind]);
            if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
                System.out.print(": \"" + t.image + "\"");
            }
            System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
        }
    }

    private void trace_scan(Token t1, int t2) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.print("Visited token: <" + tokenImage[t1.kind]);
            if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
                System.out.print(": \"" + t1.image + "\"");
            }
            System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
        }
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 14; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
