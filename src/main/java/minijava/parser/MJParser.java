/* MJParser.java */
/* Generated By:JavaCC: Do not edit this line. MJParser.java */
package minijava.parser;

import java.util.ArrayList;

public class MJParser implements MJParserConstants {

    final public Program Program() throws ParseException {
        trace_call("Program");
        try {
            MainClass mainClass;
            ClassDeclaration currentClass;
            List<ClassDeclaration> classes = new ArrayList<ClassDeclaration>();
            mainClass = MainClass();
            label_1:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case CLASS: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                }
                currentClass = ClassDeclaration();
                classes.add(currentClass);
            }
            jj_consume_token(0);
            {
                if ("" != null)
                    return new Program(mainClass, new NodeList<ClassDeclaration>(classes));
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Program");
        }
    }

    final public MainClass MainClass() throws ParseException {
        trace_call("MainClass");
        try {
            Token className;
            Token argName;
            Statement statement;
            jj_consume_token(CLASS);
            className = jj_consume_token(IDENTIFIER);
            jj_consume_token(LBRACE);
            jj_consume_token(PUBLIC);
            jj_consume_token(STATIC);
            jj_consume_token(VOID);
            jj_consume_token(MAIN);
            jj_consume_token(LPAREN);
            jj_consume_token(STRING);
            jj_consume_token(LBRACKET);
            jj_consume_token(RBRACKET);
            argName = jj_consume_token(IDENTIFIER);
            jj_consume_token(RPAREN);
            jj_consume_token(LBRACE);
            statement = Statement();
            jj_consume_token(RBRACE);
            jj_consume_token(RBRACE);
            {
                if ("" != null) return new MainClass(className.image, argName.image, statement);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("MainClass");
        }
    }

    final public ClassDeclaration ClassDeclaration() throws ParseException {
        trace_call("ClassDeclaration");
        try {
            Token id;
            Token extending = null;
            List<VarDeclaration> variables = new ArrayList<VariableDeclaration>();
            List<MethodDeclaration> methods = new ArrayList<MethodDeclaration>();
            jj_consume_token(CLASS);
            id = jj_consume_token(IDENTIFIER);
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case EXTENDS: {
                    jj_consume_token(EXTENDS);
                    extending = jj_consume_token(IDENTIFIER);
                    break;
                }
                default:
                    jj_la1[1] = jj_gen;
                    ;
            }
            jj_consume_token(LBRACE);
            label_2:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case BOOLEAN:
                    case INT:
                    case PRIVATE:
                    case PROTECTED:
                    case PUBLIC:
                    case STRING:
                    case IDENTIFIER: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[2] = jj_gen;
                        break label_2;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case BOOLEAN:
                    case INT:
                    case STRING:
                    case IDENTIFIER: {
                        VariablDeclaration variable = null;
                        variable = VariableDeclaration(VariableDeclaration.Kind.FIELD);
                        variables.add(variable);
                        break;
                    }
                    case PRIVATE:
                    case PROTECTED:
                    case PUBLIC: {
                        MethodDeclaration method = null;
                        method = MethodDeclaration();
                        methods.add(method);
                        break;
                    }
                    default:
                        jj_la1[3] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            jj_consume_token(RBRACE);
            {
                if ("" != null)
                    return new ClassDeclaration(id.image, (exts != null ? exts.image : null), variables, methods);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ClassDeclaration");
        }
    }

    final public VariableDeclaration VariableDeclaration(VariableDeclaration.Kind kind) throws ParseException {
        trace_call("VariableDeclaration");
        try {
            Type type;
            Token name;
            type = Type();
            name = jj_consume_token(IDENTIFIER);
            jj_consume_token(SEMICOLON);
            {
                if ("" != null) return new VariableDeclaration(kind, t, name.image);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("VariableDeclaration");
        }
    }

    final public MethodDeclaration MethodDeclaration() throws ParseException {
        trace_call("MethodDeclaration");
        try {
            Type returnType;
            Token name;
            NodeList<VariableDeclaration> args;
            List<Statement> body = new ArrayList<Statement>();
            List<VariableDeclaration> variables = new ArrayList<VariableDeclaration>();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case PUBLIC: {
                    jj_consume_token(PUBLIC);
                    break;
                }
                case PRIVATE: {
                    jj_consume_token(PRIVATE);
                    break;
                }
                case PROTECTED: {
                    jj_consume_token(PROTECTED);
                    break;
                }
                default:
                    jj_la1[4] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            type = Type();
            name = jj_consume_token(IDENTIFIER);
            jj_consume_token(LPAREN);
            args = FormalList();
            jj_consume_token(RPAREN);
            jj_consume_token(LBRACE);
            label_3:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case BOOLEAN:
                    case DO:
                    case IF:
                    case INT:
                    case PRINT:
                    case STRING:
                    case WHILE:
                    case IDENTIFIER:
                    case LBRACE: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[5] = jj_gen;
                        break label_3;
                }
                if (jj_2_1(2)) {
                    VariableDeclaration var;
                    var = VariableDeclaration(VariableDeclaration.Kind.LOCAL);
                    variables.add(var);
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case DO:
                        case IF:
                        case PRINT:
                        case WHILE:
                        case IDENTIFIER:
                        case LBRACE: {
                            Statement statement;
                            statement = Statement();
                            body.add(statement);
                            break;
                        }
                        default:
                            jj_la1[6] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
            }
            jj_consume_token(RETURN);
            Expression returnStatement;
            returnStatement = Expression();
            jj_consume_token(SEMICOLON);
            jj_consume_token(RBRACE);
            {
                if ("" != null) return new MethodDeclaration(returnType, name, args,
                        new NodeList<VariableDeclaration>(vars), new NodeList(body), returnStatement);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("MethodDeclaration");
        }
    }

    final public NodeList<VariableDeclaration> FormalList() throws ParseException {
        trace_call("FormalList");
        try {
            Type type;
            Token name;
            ArrayList<VariableDeclaration> vars = new ArrayList<VariableDeclaration>();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case BOOLEAN:
                case INT:
                case STRING:
                case IDENTIFIER: {
                    type = Type();
                    name = jj_consume_token(IDENTIFIER);
                    vars.add(new VariableDeclaration(VariableDeclaration.Kind.FORMAL, type, name.image));
                    label_4:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case COMMA: {
                                ;
                                break;
                            }
                            default:
                                jj_la1[7] = jj_gen;
                                break label_4;
                        }
                        jj_consume_token(COMMA);
                        type = Type();
                        name = jj_consume_token(IDENTIFIER);
                        vars.add(new VariableDeclaration(VariableDeclaration.Kind.FORMAL, type, name.image));
                    }
                    break;
                }
                default:
                    jj_la1[8] = jj_gen;
                    ;
            }
            {
                if ("" != null) return new NodeList<VariableDeclaration>(vars);
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("FormalList");
        }
    }

    final public Type Type() throws ParseException {
        trace_call("Type");
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case INT: {
                    jj_consume_token(INT);
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case LBRACKET: {
                            jj_consume_token(LBRACKET);
                            jj_consume_token(RBRACKET);
                            {
                                if ("" != null) return IntArrayType.instance;
                            }
                            break;
                        }
                        default:
                            jj_la1[9] = jj_gen;
                            ;
                    }
                    {
                        if ("" != null) return IntegerType.instance;
                    }
                    break;
                }
                case BOOLEAN: {
                    jj_consume_token(BOOLEAN);
                    {
                        if ("" != null) return BooleanType.instance;
                    }
                    break;
                }
                case STRING: {
                    jj_consume_token(STRING);
                    {
                        if ("" != null) return new ObjectType("String");
                    }
                    break;
                }
                case IDENTIFIER: {
                    Token name;
                    name = jj_consume_token(IDENTIFIER);
                    {
                        if ("" != null) return new ObjectType(name.image);
                    }
                    break;
                }
                default:
                    jj_la1[10] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Type");
        }
    }

    final public Statement Statement() throws ParseException {
        trace_call("Statement");
        try {
            Statement statement;
            Statement statementLocal;
            Expression expression;
            Expression branch;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBRACE: {
                    List<Statement> statements = new ArrayList<Statements>();
                    jj_consume_token(LBRACE);
                    label_5:
                    while (true) {
                        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                            case DO:
                            case IF:
                            case PRINT:
                            case WHILE:
                            case IDENTIFIER:
                            case LBRACE: {
                                ;
                                break;
                            }
                            default:
                                jj_la1[11] = jj_gen;
                                break label_5;
                        }
                        statementLocal = Statement();
                        statements.add(statementLocal);
                    }
                    jj_consume_token(RBRACE);
                    {
                        if ("" != null) return new Block(new NodeList<Statement>(statements));
                    }
                    break;
                }
                case IF: {
                    Statement conditionTrue;
                    Statement conditionFalse;
                    List<Statement> elseIfConditions = new ArrayList<Statement>();
                    jj_consume_token(IF);
                    jj_consume_token(LPAREN);
                    test = Expression();
                    jj_consume_token(RPAREN);
                    jj_consume_token(LBRACE);
                    conditionTrue = Statement();
                    jj_consume_token(RBRACE);
                    jj_consume_token(ELSE);
                    jj_consume_token(LBRACE);
                    conditionFalse = Statement();
                    jj_consume_token(RBRACE);
                    {
                        if ("" != null) return new Branch(test, conditionTrue, conditionFalse);
                    }
                    break;
                }
                case WHILE: {
                    Statement body;
                    jj_consume_token(WHILE);
                    jj_consume_token(LPAREN);
                    test = Expression();
                    jj_consume_token(RPAREN);
                    jj_consume_token(LBRACE);
                    body = Statement();
                    jj_consume_token(RBRACE);
                    {
                        if ("" != null) return new While(test, body);
                    }
                    break;
                }
                case DO: {
                    Statement body;
                    jj_consume_token(DO);
                    jj_consume_token(LBRACE);
                    body = Statement();
                    jj_consume_token(RBRACE);
                    jj_consume_token(WHILE);
                    jj_consume_token(LPAREN);
                    test = Expression();
                    jj_consume_token(RPAREN);
                    jj_consume_token(SEMICOLON);
                    {
                        if ("" != null) return new DoWhile(test, body);
                    }
                    break;
                }
                case PRINT: {
                    jj_consume_token(PRINT);
                    jj_consume_token(LPAREN);
                    expression = Expression();
                    jj_consume_token(RPAREN);
                    jj_consume_token(SEMICOLON);
                    {
                        if ("" != null) return new Print(expression);
                    }
                    break;
                }
                case IDENTIFIER: {
                    Token name;
                    Expression index = null;
                    Expression assign;
                    name = jj_consume_token(IDENTIFIER);
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case LBRACKET: {
                            jj_consume_token(LBRACKET);
                            index = Expression();
                            jj_consume_token(RBRACKET);
                            break;
                        }
                        default:
                            jj_la1[12] = jj_gen;
                            ;
                    }
                    jj_consume_token(ASSIGN);
                    assign = Expression();
                    jj_consume_token(SEMICOLON);
                    if (index == null) {
                        {
                            if ("" != null) return new Assign(name.image, assign);
                        }
                    } else {
                        {
                            if ("" != null) return new ArrayAssign(id.image, index, assign);
                        }
                    }
                    break;
                }
                default:
                    jj_la1[13] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Statement");
        }
    }

    final public Expression Expression() throws ParseException {
        trace_call("Expression");
        try {
            Expression left, right;
            left = LessThanTerm();
            label_6:
            while (true) {
                if (jj_2_2(2)) {
                    ;
                } else {
                    break label_6;
                }
                jj_consume_token(AND);
                right = LessThanTerm();
                left = new And(left, right);
            }
            {
                if ("" != null) return left;
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("Expression");
        }
    }

    final public Expression LessThanTerm() throws ParseException {
        trace_call("LessThanTerm");
        try {
            Expression left, right;
            left = GreaterThanTerm();
            label_7:
            while (true) {
                if (jj_2_3(2)) {
                    ;
                } else {
                    break label_7;
                }
                jj_consume_token(LESSTHAN);
                right = GreaterThanTerm();
                left = new LessThanTerm(left, right);
            }
            {
                if ("" != null) return left;
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("LessThanTerm");
        }
    }

    final public Expression GreaterThanTerm() throws ParseException {
        trace_call("GreaterThanTerm");
        try {
            Expression left, right;
            left = AdditionTerm();
            label_8:
            while (true) {
                if (jj_2_4(2)) {
                    ;
                } else {
                    break label_8;
                }
                jj_consume_token(GREATERTHAN);
                right = AdditionTerm();
                left = new GreaterThanTerm(left, right);
            }
            {
                if ("" != null) return left;
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("GreaterThanTerm");
        }
    }

    final public Expression AdditionTerm() throws ParseException {
        trace_call("AdditionTerm");
        try {
            Expression left, right;
            left = DivideTerm();
            label_9:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case ADD:
                    case MINUS: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[14] = jj_gen;
                        break label_9;
                }
                if (jj_2_5(2)) {
                    jj_consume_token(ADD);
                    right = DivideTerm();
                    left = new Addition(left, right);
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case MINUS: {
                            jj_consume_token(MINUS);
                            right = DivideTerm();
                            left = new Subtraction(left, right);
                            break;
                        }
                        default:
                            jj_la1[15] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
            }
            {
                if ("" != null) return left;
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("AdditionTerm");
        }
    }

    final public Expression DivideTerm() throws ParseException {
        trace_call("DivideTerm");
        try {
            Expression left, right;
            left = MultiplyTerm();
            label_10:
            while (true) {
                if (jj_2_6(2)) {
                    ;
                } else {
                    break label_10;
                }
                jj_consume_token(DIVIDE);
                right = MultiplyTerm();
                left = new Division(left, right);
            }
            {
                if ("" != null) return left;
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("DivideTerm");
        }
    }

    final public Expression MultiplyTerm() throws ParseException {
        trace_call("MultiplyTerm");
        try {
            Expression left, right;
            left = NotTerm();
            label_11:
            while (true) {
                if (jj_2_7(2)) {
                    ;
                } else {
                    break label_11;
                }
                jj_consume_token(MULTIPLY);
                right = NotTerm();
                left = new Multiplication(left, right);
            }
            {
                if ("" != null) return left;
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("MultiplyTerm");
        }
    }

    final public Expression NotTerm() throws ParseException {
        trace_call("NotTerm");
        try {
            Expression expression;
            if (jj_2_8(2)) {
                jj_consume_token(BANG);
                expression = NotTerm();
                {
                    if ("" != null) return new Negation(expression);
                }
            } else {
                expression = DotTerm();
                {
                    if ("" != null) return expression;
                }
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("NotTerm");
        }
    }

    final public Expression DotTerm() throws ParseException {
        trace_call("DotTerm");
        try {
            Expression left, right;
            left = ArrayTerm();
            label_12:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case DOTLENGTH:
                    case DOT: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[16] = jj_gen;
                        break label_12;
                }
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case DOTLENGTH: {
                        jj_consume_token(DOTLENGTH);
                        {
                            if ("" != null) return new ArrayLength(left);
                        }
                        break;
                    }
                    case DOT: {
                        jj_consume_token(DOT);
                        left = MethodInvoke(left);
                        left = right;
                        break;
                    }
                    default:
                        jj_la1[17] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
            {
                if ("" != null) return left;
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("DotTerm");
        }
    }

    final public Expression MethodInvoke(Expression left) throws ParseException {
        trace_call("MethodInvoke");
        try {
            Expression arg;
            List<Expression> args = new ArrayList<Expression>();
            Token name;
            name = jj_consume_token(IDENTIFIER);
            jj_consume_token(LPAREN);
            arg = Expression();
            args.add(arg);
            label_13:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case COMMA: {
                        ;
                        break;
                    }
                    default:
                        jj_la1[18] = jj_gen;
                        break label_13;
                }
                jj_consume_token(COMMA);
                arg = Expression();
                args.add(arg);
            }
            jj_consume_token(RPAREN);
            {
                if ("" != null) return new Invoke(left, name.image, new NodeList<Expression>(args));
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("MethodInvoke");
        }
    }

    final public Expression ArrayTerm() throws ParseException {
        trace_call("ArrayTerm");
        try {
            Expression term;
            Expression index = null;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case LBRACKET: {
                    jj_consume_token(LBRACKET);
                    index = Expression();
                    jj_consume_token(RBRACKET);
                    break;
                }
                default:
                    jj_la1[19] = jj_gen;
                    ;
            }
            if (index == null) {
                {
                    if ("" != null) return term;
                }
            } else {
                {
                    if ("" != null) return new ArrayLookUp(term, index);
                }
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("ArrayTerm");
        }
    }

    final public Expression TerminalExpression() throws ParseException {
        trace_call("TerminalExpression");
        try {
            Token name;
            Expression term;
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case INT_SCALAR: {
                    name = jj_consume_token(INT_SCALAR);
                    {
                        if ("" != null) return new IntegerLiteral(String.valueOf(name.image));
                    }
                    break;
                }
                case IDENTIFIER: {
                    name = jj_consume_token(IDENTIFIER);
                    {
                        if ("" != null) return new IdentifierExpression(id.image);
                    }
                    break;
                }
                case NEW: {
                    jj_consume_token(NEW);
                    term = InstantiateObject();
                    {
                        if ("" != null) return term;
                    }
                    break;
                }
                case LPAREN: {
                    jj_consume_token(LPAREN);
                    term = Expression();
                    jj_consume_token(RPAREN);
                    {
                        if ("" != null) return term;
                    }
                    break;
                }
                case THIS: {
                    jj_consume_token(THIS);
                    {
                        if ("" != null) return new Instance();
                    }
                    break;
                }
                case TRUE: {
                    jj_consume_token(TRUE);
                    {
                        if ("" != null) return new BooleanLiteral(true);
                    }
                    break;
                }
                case FALSE: {
                    jj_consume_token(FALSE);
                    {
                        if ("" != null) return new BooleanLiteral(false);
                    }
                    break;
                }
                default:
                    jj_la1[20] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("TerminalExpression");
        }
    }

    final public Expression InstantiateObject() throws ParseException {
        trace_call("InstantiateObject");
        try {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case INT: {
                    Expression expression;
                    jj_consume_token(INT);
                    jj_consume_token(LBRACKET);
                    expression = Expression();
                    jj_consume_token(RBRACKET);
                    {
                        if ("" != null) return new NewArray(exp);
                    }
                    break;
                }
                case IDENTIFIER: {
                    Token name;
                    name = jj_consume_token(IDENTIFIER);
                    jj_consume_token(LPAREN);
                    jj_consume_token(RPAREN);
                    {
                        if ("" != null) return new NewObject(name.image);
                    }
                    break;
                }
                default:
                    jj_la1[21] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            throw new Error("Missing return statement in function");
        } finally {
            trace_return("InstantiateObject");
        }
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_1();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_2();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_3();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_4();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_5();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_6();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_7();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return !jj_3_8();
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_3_4() {
        if (jj_scan_token(GREATERTHAN)) return true;
        if (jj_3R_17()) return true;
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_3R_29()) return true;
        return false;
    }

    private boolean jj_3R_16() {
        if (!jj_rescan) trace_call("GreaterThanTerm(LOOKING AHEAD...)");
        if (jj_3R_17()) {
            if (!jj_rescan) trace_return("GreaterThanTerm(LOOKAHEAD FAILED)");
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_4()) {
                jj_scanpos = xsp;
                break;
            }
        }
        {
            if (!jj_rescan) trace_return("GreaterThanTerm(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3_8() {
        if (jj_scan_token(BANG)) return true;
        if (jj_3R_20()) return true;
        return false;
    }

    private boolean jj_3R_20() {
        if (!jj_rescan) trace_call("NotTerm(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_8()) {
            jj_scanpos = xsp;
            if (jj_3R_23()) {
                if (!jj_rescan) trace_return("NotTerm(LOOKAHEAD FAILED)");
                return true;
            }
        }
        {
            if (!jj_rescan) trace_return("NotTerm(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_33() {
        if (jj_scan_token(LBRACKET)) return true;
        return false;
    }

    private boolean jj_3_3() {
        if (jj_scan_token(LESSTHAN)) return true;
        if (jj_3R_16()) return true;
        return false;
    }

    private boolean jj_3_7() {
        if (jj_scan_token(MULTIPLY)) return true;
        if (jj_3R_20()) return true;
        return false;
    }

    private boolean jj_3R_15() {
        if (!jj_rescan) trace_call("LessThanTerm(LOOKING AHEAD...)");
        if (jj_3R_16()) {
            if (!jj_rescan) trace_return("LessThanTerm(LOOKAHEAD FAILED)");
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_3()) {
                jj_scanpos = xsp;
                break;
            }
        }
        {
            if (!jj_rescan) trace_return("LessThanTerm(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_19() {
        if (!jj_rescan) trace_call("MultiplyTerm(LOOKING AHEAD...)");
        if (jj_3R_20()) {
            if (!jj_rescan) trace_return("MultiplyTerm(LOOKAHEAD FAILED)");
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_7()) {
                jj_scanpos = xsp;
                break;
            }
        }
        {
            if (!jj_rescan) trace_return("MultiplyTerm(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_31() {
        if (!jj_rescan) trace_call("ArrayTerm(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_33()) jj_scanpos = xsp;
        {
            if (!jj_rescan) trace_return("ArrayTerm(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3_2() {
        if (jj_scan_token(AND)) return true;
        if (jj_3R_15()) return true;
        return false;
    }

    private boolean jj_3_6() {
        if (jj_scan_token(DIVIDE)) return true;
        if (jj_3R_19()) return true;
        return false;
    }

    private boolean jj_3_1() {
        if (jj_3R_14()) return true;
        return false;
    }

    private boolean jj_3R_18() {
        if (!jj_rescan) trace_call("DivideTerm(LOOKING AHEAD...)");
        if (jj_3R_19()) {
            if (!jj_rescan) trace_return("DivideTerm(LOOKAHEAD FAILED)");
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3_6()) {
                jj_scanpos = xsp;
                break;
            }
        }
        {
            if (!jj_rescan) trace_return("DivideTerm(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_28() {
        if (jj_scan_token(MINUS)) return true;
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_scan_token(LBRACKET)) return true;
        return false;
    }

    private boolean jj_3R_35() {
        if (jj_scan_token(DOT)) return true;
        return false;
    }

    private boolean jj_3_5() {
        if (jj_scan_token(ADD)) return true;
        if (jj_3R_18()) return true;
        return false;
    }

    private boolean jj_3R_22() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3_5()) {
            jj_scanpos = xsp;
            if (jj_3R_28()) return true;
        }
        return false;
    }

    private boolean jj_3R_14() {
        if (!jj_rescan) trace_call("VariableDeclaration(LOOKING AHEAD...)");
        if (jj_3R_21()) {
            if (!jj_rescan) trace_return("VariableDeclaration(LOOKAHEAD FAILED)");
            return true;
        }
        if (jj_scan_token(IDENTIFIER)) {
            if (!jj_rescan) trace_return("VariableDeclaration(LOOKAHEAD FAILED)");
            return true;
        }
        {
            if (!jj_rescan) trace_return("VariableDeclaration(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_34() {
        if (jj_scan_token(DOTLENGTH)) return true;
        return false;
    }

    private boolean jj_3R_32() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_34()) {
            jj_scanpos = xsp;
            if (jj_3R_35()) return true;
        }
        return false;
    }

    private boolean jj_3R_27() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    private boolean jj_3R_17() {
        if (!jj_rescan) trace_call("AdditionTerm(LOOKING AHEAD...)");
        if (jj_3R_18()) {
            if (!jj_rescan) trace_return("AdditionTerm(LOOKAHEAD FAILED)");
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_22()) {
                jj_scanpos = xsp;
                break;
            }
        }
        {
            if (!jj_rescan) trace_return("AdditionTerm(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_25() {
        if (jj_scan_token(BOOLEAN)) return true;
        return false;
    }

    private boolean jj_3R_24() {
        if (jj_scan_token(INT)) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_30()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_21() {
        if (!jj_rescan) trace_call("Type(LOOKING AHEAD...)");
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_24()) {
            jj_scanpos = xsp;
            if (jj_3R_25()) {
                jj_scanpos = xsp;
                if (jj_3R_26()) {
                    jj_scanpos = xsp;
                    if (jj_3R_27()) {
                        if (!jj_rescan) trace_return("Type(LOOKAHEAD FAILED)");
                        return true;
                    }
                }
            }
        }
        {
            if (!jj_rescan) trace_return("Type(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    private boolean jj_3R_29() {
        if (!jj_rescan) trace_call("DotTerm(LOOKING AHEAD...)");
        if (jj_3R_31()) {
            if (!jj_rescan) trace_return("DotTerm(LOOKAHEAD FAILED)");
            return true;
        }
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_32()) {
                jj_scanpos = xsp;
                break;
            }
        }
        {
            if (!jj_rescan) trace_return("DotTerm(LOOKAHEAD SUCCEEDED)");
            return false;
        }
    }

    /**
     * Generated bioscript.parser.Token Manager.
     */
    public MJParserTokenManager token_source;
    JavaCharStream jj_input_stream;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    private int jj_gen;
    final private int[] jj_la1 = new int[22];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0x100, 0x1000, 0x2590040, 0x2590040, 0x580000, 0x42218440, 0x40208400, 0x0, 0x2010040, 0x0, 0x2010040, 0x40208400, 0x0, 0x40208400, 0x0, 0x0, 0x80000000, 0x80000000, 0x0, 0x0, 0x18042000, 0x10000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x1, 0x1, 0x0, 0x101, 0x101, 0x4000, 0x1, 0x40, 0x1, 0x101, 0x40, 0x101, 0x40400, 0x40000, 0x8000, 0x8000, 0x4000, 0x40, 0x13, 0x1,};
    }

    final private JJCalls[] jj_2_rtns = new JJCalls[8];
    private boolean jj_rescan = false;
    private int jj_gc = 0;

    /**
     * Constructor with InputStream.
     */
    public MJParser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public MJParser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new MJParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 22; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 22; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor.
     */
    public MJParser(java.io.Reader stream) {
        jj_input_stream = new JavaCharStream(stream, 1, 1);
        token_source = new MJParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 22; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 22; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor with generated bioscript.parser.Token Manager.
     */
    public MJParser(MJParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 22; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(MJParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 22; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            trace_token(token, "");
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
    }

    final private LookaheadSuccess jj_ls = new LookaheadSuccess();

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        } else {
            trace_scan(jj_scanpos, kind);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }


    /**
     * Get the next bioscript.parser.Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        trace_token(token, " (in getNextToken)");
        return token;
    }

    /**
     * Get the specific bioscript.parser.Token.
     */
    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) return;
        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];
            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }
            jj_entries_loop:
            for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext(); ) {
                int[] oldentry = (int[]) (it.next());
                if (oldentry.length == jj_expentry.length) {
                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            continue jj_entries_loop;
                        }
                    }
                    jj_expentries.add(jj_expentry);
                    break jj_entries_loop;
                }
            }
            if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
        }
    }

    /**
     * Generate bioscript.parser.ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[55];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 22; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 55; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    private int trace_indent = 0;
    private boolean trace_enabled = true;

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
        trace_enabled = true;
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
        trace_enabled = false;
    }

    private void trace_call(String s) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.println("Call:   " + s);
        }
        trace_indent = trace_indent + 2;
    }

    private void trace_return(String s) {
        trace_indent = trace_indent - 2;
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.println("Return: " + s);
        }
    }

    private void trace_token(Token t, String where) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.print("Consumed token: <" + tokenImage[t.kind]);
            if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
                System.out.print(": \"" + t.image + "\"");
            }
            System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
        }
    }

    private void trace_scan(Token t1, int t2) {
        if (trace_enabled) {
            for (int i = 0; i < trace_indent; i++) {
                System.out.print(" ");
            }
            System.out.print("Visited token: <" + tokenImage[t1.kind]);
            if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
                System.out.print(": \"" + t1.image + "\"");
            }
            System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
        }
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 8; i++) {
            try {
                JJCalls p = jj_2_rtns[i];
                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);
            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
