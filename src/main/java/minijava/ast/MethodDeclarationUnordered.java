//
// Generated by JTB 1.3.2
//

package minijava.ast;

import minijava.visitor.GJNoArguVisitor;
import minijava.visitor.GJVisitor;
import minijava.visitor.GJVoidVisitor;
import minijava.visitor.Visitor;


/**
 * Grammar production: f0 -> <PUBLIC> f1 -> Type() f2 -> Identifier() f3 -> <LPAREN> f4 -> (
 * FormalParameterList() )? f5 -> <RPAREN> f6 -> <LBRACE> f7 -> ( Comment() )* f8 -> (
 * VarDeclarationUnordered() )* f9 -> ( Statement() )* f10 -> <RETURN> f11 -> Expression() f12 ->
 * <SEMICOLON> f13 -> <RBRACE>
 */
public class MethodDeclarationUnordered implements Node {
    public NodeToken f0;
    public Type f1;
    public Identifier f2;
    public NodeToken f3;
    public NodeOptional f4;
    public NodeToken f5;
    public NodeToken f6;
    public NodeListOptional f7;
    public NodeListOptional f8;
    public NodeListOptional f9;
    public NodeToken f10;
    public Expression f11;
    public NodeToken f12;
    public NodeToken f13;

    public MethodDeclarationUnordered(NodeToken n0, Type n1, Identifier n2, NodeToken n3, NodeOptional n4, NodeToken n5, NodeToken n6, NodeListOptional n7, NodeListOptional n8, NodeListOptional n9, NodeToken n10, Expression n11, NodeToken n12, NodeToken n13) {
        f0 = n0;
        f1 = n1;
        f2 = n2;
        f3 = n3;
        f4 = n4;
        f5 = n5;
        f6 = n6;
        f7 = n7;
        f8 = n8;
        f9 = n9;
        f10 = n10;
        f11 = n11;
        f12 = n12;
        f13 = n13;
    }

    public MethodDeclarationUnordered(Type n0, Identifier n1, NodeOptional n2, NodeListOptional n3, NodeListOptional n4, NodeListOptional n5, Expression n6) {
        f0 = new NodeToken("public");
        f1 = n0;
        f2 = n1;
        f3 = new NodeToken("(");
        f4 = n2;
        f5 = new NodeToken(")");
        f6 = new NodeToken("{");
        f7 = n3;
        f8 = n4;
        f9 = n5;
        f10 = new NodeToken("return");
        f11 = n6;
        f12 = new NodeToken(";");
        f13 = new NodeToken("}");
    }

    public void accept(Visitor v) {
        v.visit(this);
    }

    public <R, A> R accept(GJVisitor<R, A> v, A argu) {
        return v.visit(this, argu);
    }

    public <R> R accept(GJNoArguVisitor<R> v) {
        return v.visit(this);
    }

    public <A> void accept(GJVoidVisitor<A> v, A argu) {
        v.visit(this, argu);
    }
}

