//
// Generated by JTB 1.3.2
//

package minijava.visitor;

import minijava.ast.AllocationExpression;
import minijava.ast.AndExpression;
import minijava.ast.ArrayAllocationExpression;
import minijava.ast.ArrayAssignmentStatement;
import minijava.ast.ArrayLength;
import minijava.ast.ArrayLookup;
import minijava.ast.ArrayType;
import minijava.ast.AssignmentStatement;
import minijava.ast.Block;
import minijava.ast.BooleanType;
import minijava.ast.BracketExpression;
import minijava.ast.ClassDeclaration;
import minijava.ast.ClassExtendsDeclaration;
import minijava.ast.Comment;
import minijava.ast.CompareExpression;
import minijava.ast.Expression;
import minijava.ast.ExpressionList;
import minijava.ast.ExpressionRest;
import minijava.ast.FalseLiteral;
import minijava.ast.FormalParameter;
import minijava.ast.FormalParameterList;
import minijava.ast.FormalParameterRest;
import minijava.ast.Goal;
import minijava.ast.Identifier;
import minijava.ast.IfStatement;
import minijava.ast.IntegerLiteral;
import minijava.ast.IntegerType;
import minijava.ast.MainClass;
import minijava.ast.MessageSend;
import minijava.ast.MethodDeclarationUnordered;
import minijava.ast.MinusExpression;
import minijava.ast.NodeList;
import minijava.ast.NodeListOptional;
import minijava.ast.NodeOptional;
import minijava.ast.NodeSequence;
import minijava.ast.NodeToken;
import minijava.ast.NotExpression;
import minijava.ast.PlusExpression;
import minijava.ast.PrimaryExpression;
import minijava.ast.PrintStatement;
import minijava.ast.Statement;
import minijava.ast.ThisExpression;
import minijava.ast.TimesExpression;
import minijava.ast.TrueLiteral;
import minijava.ast.Type;
import minijava.ast.TypeDeclarationUnordered;
import minijava.ast.VarDeclarationUnordered;
import minijava.ast.WhileStatement;

/**
 * All GJ void visitors must implement this interface.
 */

public interface GJVoidVisitor<A> {

    //
    // GJ void Auto class visitors
    //

    public void visit(NodeList n, A argu);

    public void visit(NodeListOptional n, A argu);

    public void visit(NodeOptional n, A argu);

    public void visit(NodeSequence n, A argu);

    public void visit(NodeToken n, A argu);

    //
    // User-generated visitor methods below
    //

    /**
     * f0 -> MainClass() f1 -> ( TypeDeclarationUnordered() )* f2 -> <EOF>
     */
    public void visit(Goal n, A argu);

    /**
     * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> "public" f4 -> "static" f5 -> "void" f6 ->
     * "main" f7 -> "(" f8 -> "String" f9 -> "[" f10 -> "]" f11 -> Identifier() f12 -> ")" f13 ->
     * "{" f14 -> PrintStatement() f15 -> "}" f16 -> "}"
     */
    public void visit(MainClass n, A argu);

    /**
     * f0 -> ClassDeclaration() | ClassExtendsDeclaration()
     */
    public void visit(TypeDeclarationUnordered n, A argu);

    /**
     * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> ( Comment() )* f4 -> (
     * VarDeclarationUnordered() )* f5 -> ( MethodDeclarationUnordered() )* f6 -> "}"
     */
    public void visit(ClassDeclaration n, A argu);

    /**
     * f0 -> "class" f1 -> Identifier() f2 -> "extends" f3 -> Identifier() f4 -> "{" f5 -> (
     * Comment() )* f6 -> ( VarDeclarationUnordered() )* f7 -> ( MethodDeclarationUnordered() )* f8
     * -> "}"
     */
    public void visit(ClassExtendsDeclaration n, A argu);

    /**
     * f0 -> Type() f1 -> Identifier() f2 -> ";"
     */
    public void visit(VarDeclarationUnordered n, A argu);

    /**
     * f0 -> "public" f1 -> Type() f2 -> Identifier() f3 -> "(" f4 -> ( FormalParameterList() )? f5
     * -> ")" f6 -> "{" f7 -> ( Comment() )* f8 -> ( VarDeclarationUnordered() )* f9 -> (
     * Statement() )* f10 -> "return" f11 -> Expression() f12 -> ";" f13 -> "}"
     */
    public void visit(MethodDeclarationUnordered n, A argu);

    /**
     * f0 -> FormalParameter() f1 -> ( FormalParameterRest() )*
     */
    public void visit(FormalParameterList n, A argu);

    /**
     * f0 -> Type() f1 -> Identifier()
     */
    public void visit(FormalParameter n, A argu);

    /**
     * f0 -> "," f1 -> FormalParameter()
     */
    public void visit(FormalParameterRest n, A argu);

    /**
     * f0 -> ArrayType() | BooleanType() | IntegerType() | Identifier()
     */
    public void visit(Type n, A argu);

    /**
     * f0 -> "int" f1 -> "[" f2 -> "]"
     */
    public void visit(ArrayType n, A argu);

    /**
     * f0 -> "boolean"
     */
    public void visit(BooleanType n, A argu);

    /**
     * f0 -> "int"
     */
    public void visit(IntegerType n, A argu);

    /**
     * f0 -> Block() | AssignmentStatement() | ArrayAssignmentStatement() | IfStatement() |
     * WhileStatement() | PrintStatement()
     */
    public void visit(Statement n, A argu);

    /**
     * f0 -> "{" f1 -> ( Statement() )* f2 -> "}"
     */
    public void visit(Block n, A argu);

    /**
     * f0 -> Identifier() f1 -> "=" f2 -> Expression() f3 -> ";"
     */
    public void visit(AssignmentStatement n, A argu);

    /**
     * f0 -> Identifier() f1 -> "[" f2 -> Expression() f3 -> "]" f4 -> "=" f5 -> Expression() f6 ->
     * ";"
     */
    public void visit(ArrayAssignmentStatement n, A argu);

    /**
     * f0 -> "if" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement() f5 -> "else" f6 ->
     * Statement()
     */
    public void visit(IfStatement n, A argu);

    /**
     * f0 -> "while" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> Statement()
     */
    public void visit(WhileStatement n, A argu);

    /**
     * f0 -> "System.out.println" f1 -> "(" f2 -> Expression() f3 -> ")" f4 -> ";"
     */
    public void visit(PrintStatement n, A argu);

    /**
     * f0 -> AndExpression() | CompareExpression() | PlusExpression() | MinusExpression() |
     * TimesExpression() | ArrayLookup() | ArrayLength() | MessageSend() | PrimaryExpression()
     */
    public void visit(Expression n, A argu);

    /**
     * f0 -> PrimaryExpression() f1 -> "&&" f2 -> PrimaryExpression()
     */
    public void visit(AndExpression n, A argu);

    /**
     * f0 -> PrimaryExpression() f1 -> "<" f2 -> PrimaryExpression()
     */
    public void visit(CompareExpression n, A argu);

    /**
     * f0 -> PrimaryExpression() f1 -> "+" f2 -> PrimaryExpression()
     */
    public void visit(PlusExpression n, A argu);

    /**
     * f0 -> PrimaryExpression() f1 -> "-" f2 -> PrimaryExpression()
     */
    public void visit(MinusExpression n, A argu);

    /**
     * f0 -> PrimaryExpression() f1 -> "*" f2 -> PrimaryExpression()
     */
    public void visit(TimesExpression n, A argu);

    /**
     * f0 -> PrimaryExpression() f1 -> "[" f2 -> PrimaryExpression() f3 -> "]"
     */
    public void visit(ArrayLookup n, A argu);

    /**
     * f0 -> PrimaryExpression() f1 -> "." f2 -> "length"
     */
    public void visit(ArrayLength n, A argu);

    /**
     * f0 -> PrimaryExpression() f1 -> "." f2 -> Identifier() f3 -> "(" f4 -> ( ExpressionList() )?
     * f5 -> ")"
     */
    public void visit(MessageSend n, A argu);

    /**
     * f0 -> Expression() f1 -> ( ExpressionRest() )*
     */
    public void visit(ExpressionList n, A argu);

    /**
     * f0 -> "," f1 -> Expression()
     */
    public void visit(ExpressionRest n, A argu);

    /**
     * f0 -> IntegerLiteral() | TrueLiteral() | FalseLiteral() | Identifier() | ThisExpression() |
     * ArrayAllocationExpression() | AllocationExpression() | NotExpression() | BracketExpression()
     */
    public void visit(PrimaryExpression n, A argu);

    /**
     * f0 -> <INTEGER_LITERAL>
     */
    public void visit(IntegerLiteral n, A argu);

    /**
     * f0 -> "true"
     */
    public void visit(TrueLiteral n, A argu);

    /**
     * f0 -> "false"
     */
    public void visit(FalseLiteral n, A argu);

    /**
     * f0 -> <IDENTIFIER>
     */
    public void visit(Identifier n, A argu);

    /**
     * f0 -> "this"
     */
    public void visit(ThisExpression n, A argu);

    /**
     * f0 -> "new" f1 -> "int" f2 -> "[" f3 -> Expression() f4 -> "]"
     */
    public void visit(ArrayAllocationExpression n, A argu);

    /**
     * f0 -> "new" f1 -> Identifier() f2 -> "(" f3 -> ")"
     */
    public void visit(AllocationExpression n, A argu);

    /**
     * f0 -> "!" f1 -> Expression()
     */
    public void visit(NotExpression n, A argu);

    /**
     * f0 -> "(" f1 -> Expression() f2 -> ")"
     */
    public void visit(BracketExpression n, A argu);

    /**
     * f0 -> <SINGLE_LINE_COMMENT> | <FORMAL_COMMENT> | <MULTI_LINE_COMMENT>
     */
    public void visit(Comment n, A argu);

}

