/*
The grammar file definition:
    https://javacc.org/javaccgrm
*/

options {
    STATIC = false;
    DEBUG_PARSER = true;
    DEBUG_LOOKAHEAD = true;
    DEBUG_TOKEN_MANAGER = true;
    ERROR_REPORTING = true;
    JAVA_UNICODE_ESCAPE = true;
}


PARSER_BEGIN(BioScriptParser)
  package bioscript.parser;
  public class BioScriptParser {}
PARSER_END(BioScriptParser)


/* WHITE SPACE */

SKIP:
{
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
}

/* KEYWORDS */

TOKEN :
{
    <MIX: "mix">
|   <SPLIT: "split">
|   <DRAIN: "drain">
|   <HEAT: "heat">
|   <FOR: "for">
|   <AT: "at">
|   <DETECT: "detect">
|   <REPEAT: "repeat">
|   <IF: "if">
|   <ELSE_IF: "else if" >
|   <ELSE: "else">
|   <STATIONARY: "stationary">
|   <MANIFEST: "manifest">
|   <TIMES: "times" >
|   <WITH: "with">
|   <ON: "on">
|   <INTO: "into">
|   <SOMETHING: "something">
}


/* LOGIC, SCOPING, ARRAYS, AND OPERATORS */
TOKEN : {
    <LPAREN: "(">
|   <RPAREN: ")">
|   <LBRACKET: "[">
|   <RBRACKET: "]">
|   <LBRACE: "{">
|   <RBRACE: "}">
|   <DOT: ".">
|   <ADD: "+">
|   <AND: "&&">
|   <ASSIGN: "=">
|   <BANG: "!">
|   <NOTEQUAL: "!=">
|   <LESSTHAN: "<">
|   <LESSTHANEQUAL: "<=">
|   <GREATERTHAN: ">">
|   <GREATERTHANEQUAL: ">=">
|   <EQUALITY: "==">
|   <MINUS: "-">
|   <MULTIPLY: "*" >
|   <OR: "||">
|   <INSTRUCTIONS: "instructions">
|   <TRUE: "true" >
|   <FALSE: "false" >
}


/* IDENTIFIERS */
TOKEN :
{
    //<IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"_")*>
    <INT_SCALAR: "0" | (["1"-"9"](<DIGIT>)*)>
    //|   <LETTER: ["a"-"z"] | ["A"-"Z"]>
    //|   <DIGIT: ["0"-"9"]>
}
TOKEN : /* LITERALS */
{
  <INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

void Program() :
{}
{
    Stationary()
    Manifest()
    <INSTRUCTIONS>
    Instruction()
}

void Stationary() :
{}
{
    <STATIONARY> Identifier()
}

void Manifest() :
{}
{
    <MANIFEST> Identifier()
}

void Statement() :
{}
{
    Instruction()
    |   LOOKAHEAD(BranchStatement())
            BranchStatement()
    |   LOOKAHEAD(<REPEAT> IntegerLiteral())
            WhileStatement()
}

void Instruction() :
{}
{
    LOOKAHEAD(<MIX> PrimaryExpression())
    MixStatement()
    |   SplitStatement()
    |   DrainStatement()
    |   HeatStatement()
    |   DetectStatement()
    |   RepeatStatement()
    |   AssignmentStatement()
}

void MixStatement() :
{}
{
    <MIX> PrimaryExpression() <WITH> PrimaryExpression()
    |   <FOR> IntegerLiteral()
}

void SplitStatement() :
{}
{
    <SPLIT> PrimaryExpression() <INTO> PrimaryExpression()
}

void DrainStatement() :
{}
{
    <DRAIN> PrimaryExpression()
}

void HeatStatement() :
{}
{
    <HEAT> PrimaryExpression() <AT> IntegerLiteral()
    |   LOOKAHEAD(<FOR> <INTEGER_LITERAL>)
            <FOR> IntegerLiteral()
}

void DetectStatement() :
{}
{
    <DETECT> Identifier() <ON> PrimaryExpression()
    |   <FOR> <INTEGER_LITERAL>
}

void RepeatStatement() :
{}
{
    WhileStatement()
}


void AssignmentStatement() :
{}
{
  Identifier() <ASSIGN> Expression()
}

void BranchStatement() :
{}
{
    <IF> <LPAREN> Expression() <RPAREN> <LBRACE> Statement() <RBRACE>
    | <ELSE_IF> <LPAREN> Expression() <RPAREN> <LBRACE> Statement() <RBRACE>
    | <ELSE> <LBRACE> Statement() <RBRACE>
}

void WhileStatement() :
{}
{
    <REPEAT> IntegerLiteral() <TIMES> <LBRACE> Statement() <RBRACE>
}


void PrimaryExpression() :
{}
{
    IntegerLiteral()
    |   TrueLiteral()
    |   FalseLiteral()
    |   Identifier()
    |   ParenthesisExpression()
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}


void TrueLiteral() :
{}
{
  <TRUE>
}

void FalseLiteral() :
{}
{
  <FALSE>
}

void Identifier() :
{}
{
  <IDENTIFIER>
}

void Expression() :
{}
{
    LOOKAHEAD( PrimaryExpression() <AND> )
    AndExpression()
    |   LOOKAHEAD( PrimaryExpression() <LESSTHAN> )
            LessThanExpression()
    |   LOOKAHEAD( PrimaryExpression() <LESSTHANEQUAL> )
            LessThanEqualExpression()
    |   LOOKAHEAD( PrimaryExpression() <GREATERTHAN> )
            GreaterThanExpression()
    |   LOOKAHEAD( PrimaryExpression() <GREATERTHANEQUAL> )
            GreaterThanEqualExpression()
    |   LOOKAHEAD( PrimaryExpression() <NOTEQUAL> )
            NotEqualExpression()
    |   LOOKAHEAD( PrimaryExpression() <EQUALITY> )
            EqualityExpression()
    |   LOOKAHEAD( PrimaryExpression() <OR> )
            OrExpression()
    |   LOOKAHEAD( PrimaryExpression() <ADD> )
            PlusExpression()
    |   LOOKAHEAD( PrimaryExpression() <MINUS> )
            MinusExpression()
    |   LOOKAHEAD( PrimaryExpression() <MULTIPLY> )
            TimesExpression()
    |   PrimaryExpression()
}

void AndExpression() :
{}
{
  PrimaryExpression() <AND> PrimaryExpression()
}

void LessThanExpression() :
{}
{
  PrimaryExpression() <LESSTHAN> PrimaryExpression()
}

void LessThanEqualExpression() :
{}
{
  PrimaryExpression() <LESSTHANEQUAL> PrimaryExpression()
}

void GreaterThanExpression() :
{}
{
  PrimaryExpression() <GREATERTHAN> PrimaryExpression()
}

void GreaterThanEqualExpression() :
{}
{
  PrimaryExpression() <GREATERTHANEQUAL> PrimaryExpression()
}

void NotEqualExpression() :
{}
{
  PrimaryExpression() <NOTEQUAL> PrimaryExpression()
}

void EqualityExpression() :
{}
{
  PrimaryExpression() <OR> PrimaryExpression()
}

void OrExpression() :
{}
{
  PrimaryExpression() <LESSTHAN> PrimaryExpression()
}

void PlusExpression() :
{}
{
  PrimaryExpression() <ADD> PrimaryExpression()
}

void MinusExpression() :
{}
{
  PrimaryExpression() <MINUS> PrimaryExpression()
}

void TimesExpression() :
{}
{
  PrimaryExpression() <MULTIPLY> PrimaryExpression()
}

void NotExpression() :
{}
{
  <BANG> Expression()
}

void ParenthesisExpression() :
{}
{
  <LPAREN> Expression() <RPAREN>
}
