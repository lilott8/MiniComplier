options {
      STATIC = false;
      DEBUG_PARSER = false;
      DEBUG_LOOKAHEAD = false;
      DEBUG_TOKEN_MANAGER = false;
      ERROR_REPORTING = true;
      JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MJParser)
  package parser;
  public class MJParser {}
PARSER_END(MJParser)

SKIP : /* WHITE SPACE */
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* KEYWORDS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LSQPAREN: "[" >
| < RSQPAREN: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < DOT: "." >
| < ASSIGN: "=" >
| < EQUALITY: "==" >
| < NOTEQUAL: "!=" >
| < LT: "<" >
| < LTE: "<=" >
| < GT: ">" >
| < GTE: ">=" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULTIPLY: "*" >
| < AND : "&&" >
| < NOT : "!" >
| < BOOLEAN: "boolean" >
| < CLASS: "class" >
| < INTERFACE: "interface" >
| < ELSE: "else" >
| < ELSE_IF: "else if" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < IF: "if" >
| < WHILE: "while" >
| < INTEGER: "int" >
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < TRUE: "true" >
| < PRINT: "System.out.println" >
| < VOID: "void" >
| < COMMA: "," >
}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: ( ["1"-"9"] (["0"-"9"])* | "0" ) >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


/************************************
 * The MiniJava Grammar Starts Here *
 ************************************/

void MJProgram() :
{}
{
  MainClass()
  ( TypeDeclarationUnordered() )*
  <EOF>
}

void MainClass() :
{}
{
  <CLASS> Identifier() <LBRACE>
    <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LSQPAREN> <RSQPAREN> Identifier() <RPAREN>
    <LBRACE> ( LOOKAHEAD(2) VarDeclarationUnordered() )* ( Statement() )* <RBRACE>
  <RBRACE>
}

void TypeDeclarationUnordered() :
{}
{
  LOOKAHEAD(3)
  ClassDeclaration()
    |   ClassExtendsDeclaration()
}

void ClassDeclaration() :
{}
{
  <CLASS> Identifier() <LBRACE> ( Comment() )*
                           ( VarDeclarationUnordered() )*
                           ( MethodDeclarationUnordered() )*
                       <RBRACE>
}

void ClassExtendsDeclaration() :
{}
{
  <CLASS> Identifier() <EXTENDS> Identifier()
                       <LBRACE> ( Comment() )*
                           ( VarDeclarationUnordered() )*
                           ( MethodDeclarationUnordered() )*
                       <RBRACE>
}

void VarDeclarationUnordered() :
{}
{
  Type() Identifier() <SEMICOLON>
}

void MethodDeclarationUnordered() :
{}
{
  <PUBLIC> Type() Identifier()
  <LPAREN> ( FormalParameterList() )? <RPAREN>
  <LBRACE> ( Comment() )*
      ( LOOKAHEAD(2) VarDeclarationUnordered() )*
      ( Statement() )* <RETURN> Expression() <SEMICOLON> <RBRACE>
}

void FormalParameterList() :
{}
{
  FormalParameter() ( FormalParameterRest() )*
}

void FormalParameter() :
{}
{
  Type() Identifier()
}

void FormalParameterRest() :
{}
{
  <COMMA> FormalParameter()
}

void Type() :
{}
{
    LOOKAHEAD(3)
        ArrayType()
    |   BooleanType()
    |   IntegerType()
    |   Identifier()
}

void ArrayType() :
{}
{
  <INTEGER> <LSQPAREN><RSQPAREN>
}

void BooleanType() :
{}
{
  <BOOLEAN>
}

void IntegerType() :
{}
{
  <INTEGER>
}

void Statement() :
{}
{
    Block()
    |   LOOKAHEAD(2)
            AssignmentStatement()
    |   LOOKAHEAD(2)
            ArrayAssignmentStatement()
    |   BranchStatement()
    |   WhileStatement()
    |   PrintStatement()
}

void Block() :
{}
{
  <LBRACE> ( Statement() )* <RBRACE>
}

void AssignmentStatement() :
{}
{
  Identifier() <ASSIGN> Expression() <SEMICOLON>
}

void ArrayAssignmentStatement() :
{}
{
  Identifier() <LSQPAREN> Expression() <RSQPAREN> <ASSIGN> Expression() <SEMICOLON>
}

void BranchStatement() :
{}
{
    <IF> <LPAREN> Expression() <RPAREN><LBRACE> Statement() <RBRACE>
    |   <ELSE_IF><LPAREN> Expression() <RPAREN><LBRACE> Statement() <RBRACE>
    |   <ELSE> <LBRACE> Statement() <RBRACE>
}

void WhileStatement() :
{}
{
  <WHILE> <LPAREN> Expression() <RPAREN> Statement()
}

void PrintStatement() :
{}
{
  <PRINT> <LPAREN> Expression() <RPAREN> <SEMICOLON>
}

void Expression() :
{}
{
    LOOKAHEAD( PrimaryExpression() <AND> )
        AndExpression()
    |   LOOKAHEAD( PrimaryExpression() <LT> )
            CompareExpression()
    |   LOOKAHEAD( PrimaryExpression() <PLUS> )
            PlusExpression()
    |   LOOKAHEAD( PrimaryExpression() <MINUS> )
            MinusExpression()
    |   LOOKAHEAD( PrimaryExpression() <MULTIPLY> )
            TimesExpression()
    |   LOOKAHEAD( PrimaryExpression() <RSQPAREN> )
            ArrayLookup()
    |   LOOKAHEAD( PrimaryExpression() <DOT> <LENGTH> )
            ArrayLength()
    |   LOOKAHEAD( PrimaryExpression() <DOT> Identifier() <LPAREN> )
            MessageSend()
    |   PrimaryExpression()
}

void AndExpression() :
{}
{
  PrimaryExpression() <AND> PrimaryExpression()
}

void CompareExpression() :
{}
{
  PrimaryExpression() <LT> PrimaryExpression()
}

void PlusExpression() :
{}
{
  PrimaryExpression() <PLUS> PrimaryExpression()
}

void MinusExpression() :
{}
{
  PrimaryExpression() <MINUS> PrimaryExpression()
}

void TimesExpression() :
{}
{
  PrimaryExpression() <MULTIPLY> PrimaryExpression()
}

void ArrayLookup() :
{}
{
  PrimaryExpression() <LSQPAREN> PrimaryExpression() <RSQPAREN>
}

void ArrayLength() :
{}
{
  PrimaryExpression() <DOT> <LENGTH>
}

void MessageSend() :
{}
{
  PrimaryExpression() <DOT> Identifier()
  <LPAREN> ( ExpressionList() )? <RPAREN>
}

void ExpressionList() :
{}
{
  Expression() ( ExpressionRest() )*
}

void ExpressionRest() :
{}
{
  <COMMA> Expression()
}

void PrimaryExpression() :
{}
{
    IntegerLiteral()
    |   TrueLiteral()
    |   FalseLiteral()
    |   Identifier()
    |   ThisExpression()
    |   LOOKAHEAD(3)
            ArrayAllocationExpression()
    |   AllocationExpression()
    |   NotExpression()
    |   ParenthesisExpression()
}

void IntegerLiteral() :
{}
{
  <INTEGER_LITERAL>
}


void TrueLiteral() :
{}
{
  <TRUE>
}

void FalseLiteral() :
{}
{
  <FALSE>
}

void Identifier() :
{}
{
  <IDENTIFIER>
}

void ThisExpression() :
{}
{
    <THIS>
}

void ArrayAllocationExpression() :
{}
{
  <NEW> <INTEGER> <LSQPAREN> Expression() <RSQPAREN>
}

void AllocationExpression() :
{}
{
  <NEW> Identifier() <LPAREN> <RPAREN>
}

void NotExpression() :
{}
{
  <NOT> Expression()
}

void ParenthesisExpression() :
{}
{
  <LPAREN> Expression() <RPAREN>
}

void Comment() :
{}
{
  <SINGLE_LINE_COMMENT>
| <FORMAL_COMMENT>
| <MULTI_LINE_COMMENT>
}