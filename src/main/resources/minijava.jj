/*
The grammar file definition:
    https://javacc.org/javaccgrm
*/

options {
    STATIC = false;
    DEBUG_PARSER = true;
    DEBUG_LOOKAHEAD = true;
    DEBUG_TOKEN_MANAGER = true;
    ERROR_REPORTING = true;
    JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MCLexxer)

public class MCLexxer {}

PARSER_END(MCLexxer)

/* WHITE SPACE */

SKIP:
{
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
    <BOOLEAN: "boolean">
|   <BREAK: "break">
|   <CLASS: "class">
|   <CONTINUE: "continue">
|   <DO: "do">
|   <ELSE: "else">
|   <EXTENDS: "extends">
|   <FALSE: "false">
|   <FOR: "for">
|   <IF: "if">
|   <INT: "int">
|   <NEW: "new">
|   <PRIVATE: "private">
|   <PROTECTED: "protected">
|   <PUBLIC: "public">
|   <RETURN: "return">
|   <STATIC: "static">
|   <STRING: "String">
|   <SUPER: "super">
|   <THIS: "this">
|   <TRUE: "true">
|   <VOID: "void">
|   <WHILE: "while">
|   <DOTLENGTH: ".length">
}

/* IDENTIFIERS */

TOKEN :
{
    <IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>|"_")*>
|   <INT: "0" | (["1"-"9"](<DIGIT>)*)>
|   <LETTER: ["a"-"z"] | ["A"-"Z"]>
|   <DIGIT: ["0"-"9"]>
}

/* LOGIC, SCOPING, ARRAYS, AND OPERATORS */
TOKEN : {
    <LPAREN: "(">
|   <RPAREN: ")">
|   <LBRACKET: "[">
|   <RBRACKET: "]">
|   <LBRACE: "{">
|   <RBRACE: "}">
|   <ADD: "+">
|   <AND: "&&">
|   <ASSIGN: "=">
|   <BANG: "!">
|   <COMMA: ",">
|   <DOT: ".">
|   <LESSTHAN: "<">
|   <GREATERTHAN: ">">
|   <MINUS: "-">
|   <MULTIPLY: "*">
|   <DIVIDE: "/">
|   <SEMICOLON: ";">
|   <OR: "||">
}

Program Program() : {
    MainClass mainClass;
    ClassDecl currentClass;
    List<ClassDeclaration> classes = new ArrayList<ClassDeclaration>();
} {
    mainClass = MainClass() (
        currentClass = ClassDeclaration()
        { classes.add(currentClass); }
    )* <EOF>
    { return new Program(mainClass, new NodeList<ClassDeclaration>(classes)); }
}

MainClass MainClass() : {
    Token className;
    Token argName;
    Statement statement;
} {
    <CLASS> (className = <IDENTIFIER>) <LBRACE>
        <PUBLIC> <STATIC> <VOID> <MAIN>
            <LPAREN> <STRING> <LBRACKET> <RBRACKET> (argName = <IDENTIFIER>) <RPAREN>
            <LBRACE>
                (statement = Statement())
            <RBRACE>
        <RBRACE>

        { return new MainClass(className.image, argName.image, statement); }
}

ClassDeclaration ClassDeclaration() : {
    Token id;
    Token extending = null;
    List<VarDeclaration> variables = new ArrayList<VariableDeclaration>();
    List<MethodDeclaration> methods = new ArrayList<MethodDeclaration>();
} {
    <CLASS> id=<IDENTIFIER> ( <EXTENDS> (extending = <IDENTIFIER>) ) ? <LBRACE>
        ( ( { VariablDeclaration variable = null; } variable = VariableDeclaration(VariableDeclaration.Kind.FIELD) {variables.add(variable); })
        | ({ MethodDeclaration method = null; } method = MethodDeclaration() {methods.add(method); }) ) *
    <RBRACE>
    {return new ClassDeclaration(id.image, (exts!=null?exts.image:null), variables, methods);}
}

VariableDeclaration VariableDeclaration(VariableDeclaration.Kind kind) : {
    Type type;
    Token name;
} {
    type = Type() name = <IDENTIFIER> <SEMICOLON>
    {return new VariableDeclaration(kind, t, name.image); }
}

MethodDeclaration MethodDeclaration() : {
    Type returnType;
    Token name;
    NodeList<VariableDeclaration> args;
    List<Statement> body = new ArrayList<Statement>();
    List<VariableDeclaration> variables = new ArrayList<VariableDeclaration>();
} {

    <PUBLIC> | <PRIVATE> | <PROTECTED> type = Type() name = <IDENTIFIER> <LPAREN> args = FormalList() <RPAREN> <LBRACE>
    (LOOKAHEAD(2)
        ({VariableDeclaration var;} var = VariableDeclaration(VariableDeclaration.Kind.LOCLA) {variables.add(var);})
        | ( {Statement statement;} statement = Statement() {body.add(statement);})
    )*
    <RETURN> {Expression returnStatement;} (returnStatement = Expression()) <SEMICOLON>
    <RBRACE>

    {return new MethodDeclaration(returnType, name, args,
        new NodeList<VariableDeclaration>(vars), new NodeList(body), returnStatement); }
}

